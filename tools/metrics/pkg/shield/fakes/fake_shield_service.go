// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/alphagov/paas-cf/tools/metrics/pkg/shield"
)

type FakeShieldServiceInterface struct {
	CountOnGoingAttacksStub        func() (int, error)
	countOnGoingAttacksMutex       sync.RWMutex
	countOnGoingAttacksArgsForCall []struct {
	}
	countOnGoingAttacksReturns struct {
		result1 int
		result2 error
	}
	countOnGoingAttacksReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeShieldServiceInterface) CountOnGoingAttacks() (int, error) {
	fake.countOnGoingAttacksMutex.Lock()
	ret, specificReturn := fake.countOnGoingAttacksReturnsOnCall[len(fake.countOnGoingAttacksArgsForCall)]
	fake.countOnGoingAttacksArgsForCall = append(fake.countOnGoingAttacksArgsForCall, struct {
	}{})
	stub := fake.CountOnGoingAttacksStub
	fakeReturns := fake.countOnGoingAttacksReturns
	fake.recordInvocation("CountOnGoingAttacks", []interface{}{})
	fake.countOnGoingAttacksMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShieldServiceInterface) CountOnGoingAttacksCallCount() int {
	fake.countOnGoingAttacksMutex.RLock()
	defer fake.countOnGoingAttacksMutex.RUnlock()
	return len(fake.countOnGoingAttacksArgsForCall)
}

func (fake *FakeShieldServiceInterface) CountOnGoingAttacksCalls(stub func() (int, error)) {
	fake.countOnGoingAttacksMutex.Lock()
	defer fake.countOnGoingAttacksMutex.Unlock()
	fake.CountOnGoingAttacksStub = stub
}

func (fake *FakeShieldServiceInterface) CountOnGoingAttacksReturns(result1 int, result2 error) {
	fake.countOnGoingAttacksMutex.Lock()
	defer fake.countOnGoingAttacksMutex.Unlock()
	fake.CountOnGoingAttacksStub = nil
	fake.countOnGoingAttacksReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldServiceInterface) CountOnGoingAttacksReturnsOnCall(i int, result1 int, result2 error) {
	fake.countOnGoingAttacksMutex.Lock()
	defer fake.countOnGoingAttacksMutex.Unlock()
	fake.CountOnGoingAttacksStub = nil
	if fake.countOnGoingAttacksReturnsOnCall == nil {
		fake.countOnGoingAttacksReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.countOnGoingAttacksReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeShieldServiceInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.countOnGoingAttacksMutex.RLock()
	defer fake.countOnGoingAttacksMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeShieldServiceInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ shield.ShieldServiceInterface = new(FakeShieldServiceInterface)
