// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/health"
	"github.com/aws/aws-sdk-go/service/health/healthiface"
)

type FakeHealthAPI struct {
	DescribeAffectedAccountsForOrganizationStub        func(*health.DescribeAffectedAccountsForOrganizationInput) (*health.DescribeAffectedAccountsForOrganizationOutput, error)
	describeAffectedAccountsForOrganizationMutex       sync.RWMutex
	describeAffectedAccountsForOrganizationArgsForCall []struct {
		arg1 *health.DescribeAffectedAccountsForOrganizationInput
	}
	describeAffectedAccountsForOrganizationReturns struct {
		result1 *health.DescribeAffectedAccountsForOrganizationOutput
		result2 error
	}
	describeAffectedAccountsForOrganizationReturnsOnCall map[int]struct {
		result1 *health.DescribeAffectedAccountsForOrganizationOutput
		result2 error
	}
	DescribeAffectedAccountsForOrganizationPagesStub        func(*health.DescribeAffectedAccountsForOrganizationInput, func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) bool) error
	describeAffectedAccountsForOrganizationPagesMutex       sync.RWMutex
	describeAffectedAccountsForOrganizationPagesArgsForCall []struct {
		arg1 *health.DescribeAffectedAccountsForOrganizationInput
		arg2 func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) bool
	}
	describeAffectedAccountsForOrganizationPagesReturns struct {
		result1 error
	}
	describeAffectedAccountsForOrganizationPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAffectedAccountsForOrganizationPagesWithContextStub        func(context.Context, *health.DescribeAffectedAccountsForOrganizationInput, func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) bool, ...request.Option) error
	describeAffectedAccountsForOrganizationPagesWithContextMutex       sync.RWMutex
	describeAffectedAccountsForOrganizationPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeAffectedAccountsForOrganizationInput
		arg3 func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) bool
		arg4 []request.Option
	}
	describeAffectedAccountsForOrganizationPagesWithContextReturns struct {
		result1 error
	}
	describeAffectedAccountsForOrganizationPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAffectedAccountsForOrganizationRequestStub        func(*health.DescribeAffectedAccountsForOrganizationInput) (*request.Request, *health.DescribeAffectedAccountsForOrganizationOutput)
	describeAffectedAccountsForOrganizationRequestMutex       sync.RWMutex
	describeAffectedAccountsForOrganizationRequestArgsForCall []struct {
		arg1 *health.DescribeAffectedAccountsForOrganizationInput
	}
	describeAffectedAccountsForOrganizationRequestReturns struct {
		result1 *request.Request
		result2 *health.DescribeAffectedAccountsForOrganizationOutput
	}
	describeAffectedAccountsForOrganizationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *health.DescribeAffectedAccountsForOrganizationOutput
	}
	DescribeAffectedAccountsForOrganizationWithContextStub        func(context.Context, *health.DescribeAffectedAccountsForOrganizationInput, ...request.Option) (*health.DescribeAffectedAccountsForOrganizationOutput, error)
	describeAffectedAccountsForOrganizationWithContextMutex       sync.RWMutex
	describeAffectedAccountsForOrganizationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeAffectedAccountsForOrganizationInput
		arg3 []request.Option
	}
	describeAffectedAccountsForOrganizationWithContextReturns struct {
		result1 *health.DescribeAffectedAccountsForOrganizationOutput
		result2 error
	}
	describeAffectedAccountsForOrganizationWithContextReturnsOnCall map[int]struct {
		result1 *health.DescribeAffectedAccountsForOrganizationOutput
		result2 error
	}
	DescribeAffectedEntitiesStub        func(*health.DescribeAffectedEntitiesInput) (*health.DescribeAffectedEntitiesOutput, error)
	describeAffectedEntitiesMutex       sync.RWMutex
	describeAffectedEntitiesArgsForCall []struct {
		arg1 *health.DescribeAffectedEntitiesInput
	}
	describeAffectedEntitiesReturns struct {
		result1 *health.DescribeAffectedEntitiesOutput
		result2 error
	}
	describeAffectedEntitiesReturnsOnCall map[int]struct {
		result1 *health.DescribeAffectedEntitiesOutput
		result2 error
	}
	DescribeAffectedEntitiesForOrganizationStub        func(*health.DescribeAffectedEntitiesForOrganizationInput) (*health.DescribeAffectedEntitiesForOrganizationOutput, error)
	describeAffectedEntitiesForOrganizationMutex       sync.RWMutex
	describeAffectedEntitiesForOrganizationArgsForCall []struct {
		arg1 *health.DescribeAffectedEntitiesForOrganizationInput
	}
	describeAffectedEntitiesForOrganizationReturns struct {
		result1 *health.DescribeAffectedEntitiesForOrganizationOutput
		result2 error
	}
	describeAffectedEntitiesForOrganizationReturnsOnCall map[int]struct {
		result1 *health.DescribeAffectedEntitiesForOrganizationOutput
		result2 error
	}
	DescribeAffectedEntitiesForOrganizationPagesStub        func(*health.DescribeAffectedEntitiesForOrganizationInput, func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) bool) error
	describeAffectedEntitiesForOrganizationPagesMutex       sync.RWMutex
	describeAffectedEntitiesForOrganizationPagesArgsForCall []struct {
		arg1 *health.DescribeAffectedEntitiesForOrganizationInput
		arg2 func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) bool
	}
	describeAffectedEntitiesForOrganizationPagesReturns struct {
		result1 error
	}
	describeAffectedEntitiesForOrganizationPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAffectedEntitiesForOrganizationPagesWithContextStub        func(context.Context, *health.DescribeAffectedEntitiesForOrganizationInput, func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) bool, ...request.Option) error
	describeAffectedEntitiesForOrganizationPagesWithContextMutex       sync.RWMutex
	describeAffectedEntitiesForOrganizationPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeAffectedEntitiesForOrganizationInput
		arg3 func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) bool
		arg4 []request.Option
	}
	describeAffectedEntitiesForOrganizationPagesWithContextReturns struct {
		result1 error
	}
	describeAffectedEntitiesForOrganizationPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAffectedEntitiesForOrganizationRequestStub        func(*health.DescribeAffectedEntitiesForOrganizationInput) (*request.Request, *health.DescribeAffectedEntitiesForOrganizationOutput)
	describeAffectedEntitiesForOrganizationRequestMutex       sync.RWMutex
	describeAffectedEntitiesForOrganizationRequestArgsForCall []struct {
		arg1 *health.DescribeAffectedEntitiesForOrganizationInput
	}
	describeAffectedEntitiesForOrganizationRequestReturns struct {
		result1 *request.Request
		result2 *health.DescribeAffectedEntitiesForOrganizationOutput
	}
	describeAffectedEntitiesForOrganizationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *health.DescribeAffectedEntitiesForOrganizationOutput
	}
	DescribeAffectedEntitiesForOrganizationWithContextStub        func(context.Context, *health.DescribeAffectedEntitiesForOrganizationInput, ...request.Option) (*health.DescribeAffectedEntitiesForOrganizationOutput, error)
	describeAffectedEntitiesForOrganizationWithContextMutex       sync.RWMutex
	describeAffectedEntitiesForOrganizationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeAffectedEntitiesForOrganizationInput
		arg3 []request.Option
	}
	describeAffectedEntitiesForOrganizationWithContextReturns struct {
		result1 *health.DescribeAffectedEntitiesForOrganizationOutput
		result2 error
	}
	describeAffectedEntitiesForOrganizationWithContextReturnsOnCall map[int]struct {
		result1 *health.DescribeAffectedEntitiesForOrganizationOutput
		result2 error
	}
	DescribeAffectedEntitiesPagesStub        func(*health.DescribeAffectedEntitiesInput, func(*health.DescribeAffectedEntitiesOutput, bool) bool) error
	describeAffectedEntitiesPagesMutex       sync.RWMutex
	describeAffectedEntitiesPagesArgsForCall []struct {
		arg1 *health.DescribeAffectedEntitiesInput
		arg2 func(*health.DescribeAffectedEntitiesOutput, bool) bool
	}
	describeAffectedEntitiesPagesReturns struct {
		result1 error
	}
	describeAffectedEntitiesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAffectedEntitiesPagesWithContextStub        func(context.Context, *health.DescribeAffectedEntitiesInput, func(*health.DescribeAffectedEntitiesOutput, bool) bool, ...request.Option) error
	describeAffectedEntitiesPagesWithContextMutex       sync.RWMutex
	describeAffectedEntitiesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeAffectedEntitiesInput
		arg3 func(*health.DescribeAffectedEntitiesOutput, bool) bool
		arg4 []request.Option
	}
	describeAffectedEntitiesPagesWithContextReturns struct {
		result1 error
	}
	describeAffectedEntitiesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAffectedEntitiesRequestStub        func(*health.DescribeAffectedEntitiesInput) (*request.Request, *health.DescribeAffectedEntitiesOutput)
	describeAffectedEntitiesRequestMutex       sync.RWMutex
	describeAffectedEntitiesRequestArgsForCall []struct {
		arg1 *health.DescribeAffectedEntitiesInput
	}
	describeAffectedEntitiesRequestReturns struct {
		result1 *request.Request
		result2 *health.DescribeAffectedEntitiesOutput
	}
	describeAffectedEntitiesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *health.DescribeAffectedEntitiesOutput
	}
	DescribeAffectedEntitiesWithContextStub        func(context.Context, *health.DescribeAffectedEntitiesInput, ...request.Option) (*health.DescribeAffectedEntitiesOutput, error)
	describeAffectedEntitiesWithContextMutex       sync.RWMutex
	describeAffectedEntitiesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeAffectedEntitiesInput
		arg3 []request.Option
	}
	describeAffectedEntitiesWithContextReturns struct {
		result1 *health.DescribeAffectedEntitiesOutput
		result2 error
	}
	describeAffectedEntitiesWithContextReturnsOnCall map[int]struct {
		result1 *health.DescribeAffectedEntitiesOutput
		result2 error
	}
	DescribeEntityAggregatesStub        func(*health.DescribeEntityAggregatesInput) (*health.DescribeEntityAggregatesOutput, error)
	describeEntityAggregatesMutex       sync.RWMutex
	describeEntityAggregatesArgsForCall []struct {
		arg1 *health.DescribeEntityAggregatesInput
	}
	describeEntityAggregatesReturns struct {
		result1 *health.DescribeEntityAggregatesOutput
		result2 error
	}
	describeEntityAggregatesReturnsOnCall map[int]struct {
		result1 *health.DescribeEntityAggregatesOutput
		result2 error
	}
	DescribeEntityAggregatesRequestStub        func(*health.DescribeEntityAggregatesInput) (*request.Request, *health.DescribeEntityAggregatesOutput)
	describeEntityAggregatesRequestMutex       sync.RWMutex
	describeEntityAggregatesRequestArgsForCall []struct {
		arg1 *health.DescribeEntityAggregatesInput
	}
	describeEntityAggregatesRequestReturns struct {
		result1 *request.Request
		result2 *health.DescribeEntityAggregatesOutput
	}
	describeEntityAggregatesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *health.DescribeEntityAggregatesOutput
	}
	DescribeEntityAggregatesWithContextStub        func(context.Context, *health.DescribeEntityAggregatesInput, ...request.Option) (*health.DescribeEntityAggregatesOutput, error)
	describeEntityAggregatesWithContextMutex       sync.RWMutex
	describeEntityAggregatesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeEntityAggregatesInput
		arg3 []request.Option
	}
	describeEntityAggregatesWithContextReturns struct {
		result1 *health.DescribeEntityAggregatesOutput
		result2 error
	}
	describeEntityAggregatesWithContextReturnsOnCall map[int]struct {
		result1 *health.DescribeEntityAggregatesOutput
		result2 error
	}
	DescribeEventAggregatesStub        func(*health.DescribeEventAggregatesInput) (*health.DescribeEventAggregatesOutput, error)
	describeEventAggregatesMutex       sync.RWMutex
	describeEventAggregatesArgsForCall []struct {
		arg1 *health.DescribeEventAggregatesInput
	}
	describeEventAggregatesReturns struct {
		result1 *health.DescribeEventAggregatesOutput
		result2 error
	}
	describeEventAggregatesReturnsOnCall map[int]struct {
		result1 *health.DescribeEventAggregatesOutput
		result2 error
	}
	DescribeEventAggregatesPagesStub        func(*health.DescribeEventAggregatesInput, func(*health.DescribeEventAggregatesOutput, bool) bool) error
	describeEventAggregatesPagesMutex       sync.RWMutex
	describeEventAggregatesPagesArgsForCall []struct {
		arg1 *health.DescribeEventAggregatesInput
		arg2 func(*health.DescribeEventAggregatesOutput, bool) bool
	}
	describeEventAggregatesPagesReturns struct {
		result1 error
	}
	describeEventAggregatesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEventAggregatesPagesWithContextStub        func(context.Context, *health.DescribeEventAggregatesInput, func(*health.DescribeEventAggregatesOutput, bool) bool, ...request.Option) error
	describeEventAggregatesPagesWithContextMutex       sync.RWMutex
	describeEventAggregatesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeEventAggregatesInput
		arg3 func(*health.DescribeEventAggregatesOutput, bool) bool
		arg4 []request.Option
	}
	describeEventAggregatesPagesWithContextReturns struct {
		result1 error
	}
	describeEventAggregatesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEventAggregatesRequestStub        func(*health.DescribeEventAggregatesInput) (*request.Request, *health.DescribeEventAggregatesOutput)
	describeEventAggregatesRequestMutex       sync.RWMutex
	describeEventAggregatesRequestArgsForCall []struct {
		arg1 *health.DescribeEventAggregatesInput
	}
	describeEventAggregatesRequestReturns struct {
		result1 *request.Request
		result2 *health.DescribeEventAggregatesOutput
	}
	describeEventAggregatesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *health.DescribeEventAggregatesOutput
	}
	DescribeEventAggregatesWithContextStub        func(context.Context, *health.DescribeEventAggregatesInput, ...request.Option) (*health.DescribeEventAggregatesOutput, error)
	describeEventAggregatesWithContextMutex       sync.RWMutex
	describeEventAggregatesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeEventAggregatesInput
		arg3 []request.Option
	}
	describeEventAggregatesWithContextReturns struct {
		result1 *health.DescribeEventAggregatesOutput
		result2 error
	}
	describeEventAggregatesWithContextReturnsOnCall map[int]struct {
		result1 *health.DescribeEventAggregatesOutput
		result2 error
	}
	DescribeEventDetailsStub        func(*health.DescribeEventDetailsInput) (*health.DescribeEventDetailsOutput, error)
	describeEventDetailsMutex       sync.RWMutex
	describeEventDetailsArgsForCall []struct {
		arg1 *health.DescribeEventDetailsInput
	}
	describeEventDetailsReturns struct {
		result1 *health.DescribeEventDetailsOutput
		result2 error
	}
	describeEventDetailsReturnsOnCall map[int]struct {
		result1 *health.DescribeEventDetailsOutput
		result2 error
	}
	DescribeEventDetailsForOrganizationStub        func(*health.DescribeEventDetailsForOrganizationInput) (*health.DescribeEventDetailsForOrganizationOutput, error)
	describeEventDetailsForOrganizationMutex       sync.RWMutex
	describeEventDetailsForOrganizationArgsForCall []struct {
		arg1 *health.DescribeEventDetailsForOrganizationInput
	}
	describeEventDetailsForOrganizationReturns struct {
		result1 *health.DescribeEventDetailsForOrganizationOutput
		result2 error
	}
	describeEventDetailsForOrganizationReturnsOnCall map[int]struct {
		result1 *health.DescribeEventDetailsForOrganizationOutput
		result2 error
	}
	DescribeEventDetailsForOrganizationRequestStub        func(*health.DescribeEventDetailsForOrganizationInput) (*request.Request, *health.DescribeEventDetailsForOrganizationOutput)
	describeEventDetailsForOrganizationRequestMutex       sync.RWMutex
	describeEventDetailsForOrganizationRequestArgsForCall []struct {
		arg1 *health.DescribeEventDetailsForOrganizationInput
	}
	describeEventDetailsForOrganizationRequestReturns struct {
		result1 *request.Request
		result2 *health.DescribeEventDetailsForOrganizationOutput
	}
	describeEventDetailsForOrganizationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *health.DescribeEventDetailsForOrganizationOutput
	}
	DescribeEventDetailsForOrganizationWithContextStub        func(context.Context, *health.DescribeEventDetailsForOrganizationInput, ...request.Option) (*health.DescribeEventDetailsForOrganizationOutput, error)
	describeEventDetailsForOrganizationWithContextMutex       sync.RWMutex
	describeEventDetailsForOrganizationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeEventDetailsForOrganizationInput
		arg3 []request.Option
	}
	describeEventDetailsForOrganizationWithContextReturns struct {
		result1 *health.DescribeEventDetailsForOrganizationOutput
		result2 error
	}
	describeEventDetailsForOrganizationWithContextReturnsOnCall map[int]struct {
		result1 *health.DescribeEventDetailsForOrganizationOutput
		result2 error
	}
	DescribeEventDetailsRequestStub        func(*health.DescribeEventDetailsInput) (*request.Request, *health.DescribeEventDetailsOutput)
	describeEventDetailsRequestMutex       sync.RWMutex
	describeEventDetailsRequestArgsForCall []struct {
		arg1 *health.DescribeEventDetailsInput
	}
	describeEventDetailsRequestReturns struct {
		result1 *request.Request
		result2 *health.DescribeEventDetailsOutput
	}
	describeEventDetailsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *health.DescribeEventDetailsOutput
	}
	DescribeEventDetailsWithContextStub        func(context.Context, *health.DescribeEventDetailsInput, ...request.Option) (*health.DescribeEventDetailsOutput, error)
	describeEventDetailsWithContextMutex       sync.RWMutex
	describeEventDetailsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeEventDetailsInput
		arg3 []request.Option
	}
	describeEventDetailsWithContextReturns struct {
		result1 *health.DescribeEventDetailsOutput
		result2 error
	}
	describeEventDetailsWithContextReturnsOnCall map[int]struct {
		result1 *health.DescribeEventDetailsOutput
		result2 error
	}
	DescribeEventTypesStub        func(*health.DescribeEventTypesInput) (*health.DescribeEventTypesOutput, error)
	describeEventTypesMutex       sync.RWMutex
	describeEventTypesArgsForCall []struct {
		arg1 *health.DescribeEventTypesInput
	}
	describeEventTypesReturns struct {
		result1 *health.DescribeEventTypesOutput
		result2 error
	}
	describeEventTypesReturnsOnCall map[int]struct {
		result1 *health.DescribeEventTypesOutput
		result2 error
	}
	DescribeEventTypesPagesStub        func(*health.DescribeEventTypesInput, func(*health.DescribeEventTypesOutput, bool) bool) error
	describeEventTypesPagesMutex       sync.RWMutex
	describeEventTypesPagesArgsForCall []struct {
		arg1 *health.DescribeEventTypesInput
		arg2 func(*health.DescribeEventTypesOutput, bool) bool
	}
	describeEventTypesPagesReturns struct {
		result1 error
	}
	describeEventTypesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEventTypesPagesWithContextStub        func(context.Context, *health.DescribeEventTypesInput, func(*health.DescribeEventTypesOutput, bool) bool, ...request.Option) error
	describeEventTypesPagesWithContextMutex       sync.RWMutex
	describeEventTypesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeEventTypesInput
		arg3 func(*health.DescribeEventTypesOutput, bool) bool
		arg4 []request.Option
	}
	describeEventTypesPagesWithContextReturns struct {
		result1 error
	}
	describeEventTypesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEventTypesRequestStub        func(*health.DescribeEventTypesInput) (*request.Request, *health.DescribeEventTypesOutput)
	describeEventTypesRequestMutex       sync.RWMutex
	describeEventTypesRequestArgsForCall []struct {
		arg1 *health.DescribeEventTypesInput
	}
	describeEventTypesRequestReturns struct {
		result1 *request.Request
		result2 *health.DescribeEventTypesOutput
	}
	describeEventTypesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *health.DescribeEventTypesOutput
	}
	DescribeEventTypesWithContextStub        func(context.Context, *health.DescribeEventTypesInput, ...request.Option) (*health.DescribeEventTypesOutput, error)
	describeEventTypesWithContextMutex       sync.RWMutex
	describeEventTypesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeEventTypesInput
		arg3 []request.Option
	}
	describeEventTypesWithContextReturns struct {
		result1 *health.DescribeEventTypesOutput
		result2 error
	}
	describeEventTypesWithContextReturnsOnCall map[int]struct {
		result1 *health.DescribeEventTypesOutput
		result2 error
	}
	DescribeEventsStub        func(*health.DescribeEventsInput) (*health.DescribeEventsOutput, error)
	describeEventsMutex       sync.RWMutex
	describeEventsArgsForCall []struct {
		arg1 *health.DescribeEventsInput
	}
	describeEventsReturns struct {
		result1 *health.DescribeEventsOutput
		result2 error
	}
	describeEventsReturnsOnCall map[int]struct {
		result1 *health.DescribeEventsOutput
		result2 error
	}
	DescribeEventsForOrganizationStub        func(*health.DescribeEventsForOrganizationInput) (*health.DescribeEventsForOrganizationOutput, error)
	describeEventsForOrganizationMutex       sync.RWMutex
	describeEventsForOrganizationArgsForCall []struct {
		arg1 *health.DescribeEventsForOrganizationInput
	}
	describeEventsForOrganizationReturns struct {
		result1 *health.DescribeEventsForOrganizationOutput
		result2 error
	}
	describeEventsForOrganizationReturnsOnCall map[int]struct {
		result1 *health.DescribeEventsForOrganizationOutput
		result2 error
	}
	DescribeEventsForOrganizationPagesStub        func(*health.DescribeEventsForOrganizationInput, func(*health.DescribeEventsForOrganizationOutput, bool) bool) error
	describeEventsForOrganizationPagesMutex       sync.RWMutex
	describeEventsForOrganizationPagesArgsForCall []struct {
		arg1 *health.DescribeEventsForOrganizationInput
		arg2 func(*health.DescribeEventsForOrganizationOutput, bool) bool
	}
	describeEventsForOrganizationPagesReturns struct {
		result1 error
	}
	describeEventsForOrganizationPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEventsForOrganizationPagesWithContextStub        func(context.Context, *health.DescribeEventsForOrganizationInput, func(*health.DescribeEventsForOrganizationOutput, bool) bool, ...request.Option) error
	describeEventsForOrganizationPagesWithContextMutex       sync.RWMutex
	describeEventsForOrganizationPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeEventsForOrganizationInput
		arg3 func(*health.DescribeEventsForOrganizationOutput, bool) bool
		arg4 []request.Option
	}
	describeEventsForOrganizationPagesWithContextReturns struct {
		result1 error
	}
	describeEventsForOrganizationPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEventsForOrganizationRequestStub        func(*health.DescribeEventsForOrganizationInput) (*request.Request, *health.DescribeEventsForOrganizationOutput)
	describeEventsForOrganizationRequestMutex       sync.RWMutex
	describeEventsForOrganizationRequestArgsForCall []struct {
		arg1 *health.DescribeEventsForOrganizationInput
	}
	describeEventsForOrganizationRequestReturns struct {
		result1 *request.Request
		result2 *health.DescribeEventsForOrganizationOutput
	}
	describeEventsForOrganizationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *health.DescribeEventsForOrganizationOutput
	}
	DescribeEventsForOrganizationWithContextStub        func(context.Context, *health.DescribeEventsForOrganizationInput, ...request.Option) (*health.DescribeEventsForOrganizationOutput, error)
	describeEventsForOrganizationWithContextMutex       sync.RWMutex
	describeEventsForOrganizationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeEventsForOrganizationInput
		arg3 []request.Option
	}
	describeEventsForOrganizationWithContextReturns struct {
		result1 *health.DescribeEventsForOrganizationOutput
		result2 error
	}
	describeEventsForOrganizationWithContextReturnsOnCall map[int]struct {
		result1 *health.DescribeEventsForOrganizationOutput
		result2 error
	}
	DescribeEventsPagesStub        func(*health.DescribeEventsInput, func(*health.DescribeEventsOutput, bool) bool) error
	describeEventsPagesMutex       sync.RWMutex
	describeEventsPagesArgsForCall []struct {
		arg1 *health.DescribeEventsInput
		arg2 func(*health.DescribeEventsOutput, bool) bool
	}
	describeEventsPagesReturns struct {
		result1 error
	}
	describeEventsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEventsPagesWithContextStub        func(context.Context, *health.DescribeEventsInput, func(*health.DescribeEventsOutput, bool) bool, ...request.Option) error
	describeEventsPagesWithContextMutex       sync.RWMutex
	describeEventsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeEventsInput
		arg3 func(*health.DescribeEventsOutput, bool) bool
		arg4 []request.Option
	}
	describeEventsPagesWithContextReturns struct {
		result1 error
	}
	describeEventsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEventsRequestStub        func(*health.DescribeEventsInput) (*request.Request, *health.DescribeEventsOutput)
	describeEventsRequestMutex       sync.RWMutex
	describeEventsRequestArgsForCall []struct {
		arg1 *health.DescribeEventsInput
	}
	describeEventsRequestReturns struct {
		result1 *request.Request
		result2 *health.DescribeEventsOutput
	}
	describeEventsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *health.DescribeEventsOutput
	}
	DescribeEventsWithContextStub        func(context.Context, *health.DescribeEventsInput, ...request.Option) (*health.DescribeEventsOutput, error)
	describeEventsWithContextMutex       sync.RWMutex
	describeEventsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeEventsInput
		arg3 []request.Option
	}
	describeEventsWithContextReturns struct {
		result1 *health.DescribeEventsOutput
		result2 error
	}
	describeEventsWithContextReturnsOnCall map[int]struct {
		result1 *health.DescribeEventsOutput
		result2 error
	}
	DescribeHealthServiceStatusForOrganizationStub        func(*health.DescribeHealthServiceStatusForOrganizationInput) (*health.DescribeHealthServiceStatusForOrganizationOutput, error)
	describeHealthServiceStatusForOrganizationMutex       sync.RWMutex
	describeHealthServiceStatusForOrganizationArgsForCall []struct {
		arg1 *health.DescribeHealthServiceStatusForOrganizationInput
	}
	describeHealthServiceStatusForOrganizationReturns struct {
		result1 *health.DescribeHealthServiceStatusForOrganizationOutput
		result2 error
	}
	describeHealthServiceStatusForOrganizationReturnsOnCall map[int]struct {
		result1 *health.DescribeHealthServiceStatusForOrganizationOutput
		result2 error
	}
	DescribeHealthServiceStatusForOrganizationRequestStub        func(*health.DescribeHealthServiceStatusForOrganizationInput) (*request.Request, *health.DescribeHealthServiceStatusForOrganizationOutput)
	describeHealthServiceStatusForOrganizationRequestMutex       sync.RWMutex
	describeHealthServiceStatusForOrganizationRequestArgsForCall []struct {
		arg1 *health.DescribeHealthServiceStatusForOrganizationInput
	}
	describeHealthServiceStatusForOrganizationRequestReturns struct {
		result1 *request.Request
		result2 *health.DescribeHealthServiceStatusForOrganizationOutput
	}
	describeHealthServiceStatusForOrganizationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *health.DescribeHealthServiceStatusForOrganizationOutput
	}
	DescribeHealthServiceStatusForOrganizationWithContextStub        func(context.Context, *health.DescribeHealthServiceStatusForOrganizationInput, ...request.Option) (*health.DescribeHealthServiceStatusForOrganizationOutput, error)
	describeHealthServiceStatusForOrganizationWithContextMutex       sync.RWMutex
	describeHealthServiceStatusForOrganizationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DescribeHealthServiceStatusForOrganizationInput
		arg3 []request.Option
	}
	describeHealthServiceStatusForOrganizationWithContextReturns struct {
		result1 *health.DescribeHealthServiceStatusForOrganizationOutput
		result2 error
	}
	describeHealthServiceStatusForOrganizationWithContextReturnsOnCall map[int]struct {
		result1 *health.DescribeHealthServiceStatusForOrganizationOutput
		result2 error
	}
	DisableHealthServiceAccessForOrganizationStub        func(*health.DisableHealthServiceAccessForOrganizationInput) (*health.DisableHealthServiceAccessForOrganizationOutput, error)
	disableHealthServiceAccessForOrganizationMutex       sync.RWMutex
	disableHealthServiceAccessForOrganizationArgsForCall []struct {
		arg1 *health.DisableHealthServiceAccessForOrganizationInput
	}
	disableHealthServiceAccessForOrganizationReturns struct {
		result1 *health.DisableHealthServiceAccessForOrganizationOutput
		result2 error
	}
	disableHealthServiceAccessForOrganizationReturnsOnCall map[int]struct {
		result1 *health.DisableHealthServiceAccessForOrganizationOutput
		result2 error
	}
	DisableHealthServiceAccessForOrganizationRequestStub        func(*health.DisableHealthServiceAccessForOrganizationInput) (*request.Request, *health.DisableHealthServiceAccessForOrganizationOutput)
	disableHealthServiceAccessForOrganizationRequestMutex       sync.RWMutex
	disableHealthServiceAccessForOrganizationRequestArgsForCall []struct {
		arg1 *health.DisableHealthServiceAccessForOrganizationInput
	}
	disableHealthServiceAccessForOrganizationRequestReturns struct {
		result1 *request.Request
		result2 *health.DisableHealthServiceAccessForOrganizationOutput
	}
	disableHealthServiceAccessForOrganizationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *health.DisableHealthServiceAccessForOrganizationOutput
	}
	DisableHealthServiceAccessForOrganizationWithContextStub        func(context.Context, *health.DisableHealthServiceAccessForOrganizationInput, ...request.Option) (*health.DisableHealthServiceAccessForOrganizationOutput, error)
	disableHealthServiceAccessForOrganizationWithContextMutex       sync.RWMutex
	disableHealthServiceAccessForOrganizationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.DisableHealthServiceAccessForOrganizationInput
		arg3 []request.Option
	}
	disableHealthServiceAccessForOrganizationWithContextReturns struct {
		result1 *health.DisableHealthServiceAccessForOrganizationOutput
		result2 error
	}
	disableHealthServiceAccessForOrganizationWithContextReturnsOnCall map[int]struct {
		result1 *health.DisableHealthServiceAccessForOrganizationOutput
		result2 error
	}
	EnableHealthServiceAccessForOrganizationStub        func(*health.EnableHealthServiceAccessForOrganizationInput) (*health.EnableHealthServiceAccessForOrganizationOutput, error)
	enableHealthServiceAccessForOrganizationMutex       sync.RWMutex
	enableHealthServiceAccessForOrganizationArgsForCall []struct {
		arg1 *health.EnableHealthServiceAccessForOrganizationInput
	}
	enableHealthServiceAccessForOrganizationReturns struct {
		result1 *health.EnableHealthServiceAccessForOrganizationOutput
		result2 error
	}
	enableHealthServiceAccessForOrganizationReturnsOnCall map[int]struct {
		result1 *health.EnableHealthServiceAccessForOrganizationOutput
		result2 error
	}
	EnableHealthServiceAccessForOrganizationRequestStub        func(*health.EnableHealthServiceAccessForOrganizationInput) (*request.Request, *health.EnableHealthServiceAccessForOrganizationOutput)
	enableHealthServiceAccessForOrganizationRequestMutex       sync.RWMutex
	enableHealthServiceAccessForOrganizationRequestArgsForCall []struct {
		arg1 *health.EnableHealthServiceAccessForOrganizationInput
	}
	enableHealthServiceAccessForOrganizationRequestReturns struct {
		result1 *request.Request
		result2 *health.EnableHealthServiceAccessForOrganizationOutput
	}
	enableHealthServiceAccessForOrganizationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *health.EnableHealthServiceAccessForOrganizationOutput
	}
	EnableHealthServiceAccessForOrganizationWithContextStub        func(context.Context, *health.EnableHealthServiceAccessForOrganizationInput, ...request.Option) (*health.EnableHealthServiceAccessForOrganizationOutput, error)
	enableHealthServiceAccessForOrganizationWithContextMutex       sync.RWMutex
	enableHealthServiceAccessForOrganizationWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *health.EnableHealthServiceAccessForOrganizationInput
		arg3 []request.Option
	}
	enableHealthServiceAccessForOrganizationWithContextReturns struct {
		result1 *health.EnableHealthServiceAccessForOrganizationOutput
		result2 error
	}
	enableHealthServiceAccessForOrganizationWithContextReturnsOnCall map[int]struct {
		result1 *health.EnableHealthServiceAccessForOrganizationOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganization(arg1 *health.DescribeAffectedAccountsForOrganizationInput) (*health.DescribeAffectedAccountsForOrganizationOutput, error) {
	fake.describeAffectedAccountsForOrganizationMutex.Lock()
	ret, specificReturn := fake.describeAffectedAccountsForOrganizationReturnsOnCall[len(fake.describeAffectedAccountsForOrganizationArgsForCall)]
	fake.describeAffectedAccountsForOrganizationArgsForCall = append(fake.describeAffectedAccountsForOrganizationArgsForCall, struct {
		arg1 *health.DescribeAffectedAccountsForOrganizationInput
	}{arg1})
	stub := fake.DescribeAffectedAccountsForOrganizationStub
	fakeReturns := fake.describeAffectedAccountsForOrganizationReturns
	fake.recordInvocation("DescribeAffectedAccountsForOrganization", []interface{}{arg1})
	fake.describeAffectedAccountsForOrganizationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationCallCount() int {
	fake.describeAffectedAccountsForOrganizationMutex.RLock()
	defer fake.describeAffectedAccountsForOrganizationMutex.RUnlock()
	return len(fake.describeAffectedAccountsForOrganizationArgsForCall)
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationCalls(stub func(*health.DescribeAffectedAccountsForOrganizationInput) (*health.DescribeAffectedAccountsForOrganizationOutput, error)) {
	fake.describeAffectedAccountsForOrganizationMutex.Lock()
	defer fake.describeAffectedAccountsForOrganizationMutex.Unlock()
	fake.DescribeAffectedAccountsForOrganizationStub = stub
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationArgsForCall(i int) *health.DescribeAffectedAccountsForOrganizationInput {
	fake.describeAffectedAccountsForOrganizationMutex.RLock()
	defer fake.describeAffectedAccountsForOrganizationMutex.RUnlock()
	argsForCall := fake.describeAffectedAccountsForOrganizationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationReturns(result1 *health.DescribeAffectedAccountsForOrganizationOutput, result2 error) {
	fake.describeAffectedAccountsForOrganizationMutex.Lock()
	defer fake.describeAffectedAccountsForOrganizationMutex.Unlock()
	fake.DescribeAffectedAccountsForOrganizationStub = nil
	fake.describeAffectedAccountsForOrganizationReturns = struct {
		result1 *health.DescribeAffectedAccountsForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationReturnsOnCall(i int, result1 *health.DescribeAffectedAccountsForOrganizationOutput, result2 error) {
	fake.describeAffectedAccountsForOrganizationMutex.Lock()
	defer fake.describeAffectedAccountsForOrganizationMutex.Unlock()
	fake.DescribeAffectedAccountsForOrganizationStub = nil
	if fake.describeAffectedAccountsForOrganizationReturnsOnCall == nil {
		fake.describeAffectedAccountsForOrganizationReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeAffectedAccountsForOrganizationOutput
			result2 error
		})
	}
	fake.describeAffectedAccountsForOrganizationReturnsOnCall[i] = struct {
		result1 *health.DescribeAffectedAccountsForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationPages(arg1 *health.DescribeAffectedAccountsForOrganizationInput, arg2 func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) bool) error {
	fake.describeAffectedAccountsForOrganizationPagesMutex.Lock()
	ret, specificReturn := fake.describeAffectedAccountsForOrganizationPagesReturnsOnCall[len(fake.describeAffectedAccountsForOrganizationPagesArgsForCall)]
	fake.describeAffectedAccountsForOrganizationPagesArgsForCall = append(fake.describeAffectedAccountsForOrganizationPagesArgsForCall, struct {
		arg1 *health.DescribeAffectedAccountsForOrganizationInput
		arg2 func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeAffectedAccountsForOrganizationPagesStub
	fakeReturns := fake.describeAffectedAccountsForOrganizationPagesReturns
	fake.recordInvocation("DescribeAffectedAccountsForOrganizationPages", []interface{}{arg1, arg2})
	fake.describeAffectedAccountsForOrganizationPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationPagesCallCount() int {
	fake.describeAffectedAccountsForOrganizationPagesMutex.RLock()
	defer fake.describeAffectedAccountsForOrganizationPagesMutex.RUnlock()
	return len(fake.describeAffectedAccountsForOrganizationPagesArgsForCall)
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationPagesCalls(stub func(*health.DescribeAffectedAccountsForOrganizationInput, func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) bool) error) {
	fake.describeAffectedAccountsForOrganizationPagesMutex.Lock()
	defer fake.describeAffectedAccountsForOrganizationPagesMutex.Unlock()
	fake.DescribeAffectedAccountsForOrganizationPagesStub = stub
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationPagesArgsForCall(i int) (*health.DescribeAffectedAccountsForOrganizationInput, func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) bool) {
	fake.describeAffectedAccountsForOrganizationPagesMutex.RLock()
	defer fake.describeAffectedAccountsForOrganizationPagesMutex.RUnlock()
	argsForCall := fake.describeAffectedAccountsForOrganizationPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationPagesReturns(result1 error) {
	fake.describeAffectedAccountsForOrganizationPagesMutex.Lock()
	defer fake.describeAffectedAccountsForOrganizationPagesMutex.Unlock()
	fake.DescribeAffectedAccountsForOrganizationPagesStub = nil
	fake.describeAffectedAccountsForOrganizationPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationPagesReturnsOnCall(i int, result1 error) {
	fake.describeAffectedAccountsForOrganizationPagesMutex.Lock()
	defer fake.describeAffectedAccountsForOrganizationPagesMutex.Unlock()
	fake.DescribeAffectedAccountsForOrganizationPagesStub = nil
	if fake.describeAffectedAccountsForOrganizationPagesReturnsOnCall == nil {
		fake.describeAffectedAccountsForOrganizationPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAffectedAccountsForOrganizationPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationPagesWithContext(arg1 context.Context, arg2 *health.DescribeAffectedAccountsForOrganizationInput, arg3 func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeAffectedAccountsForOrganizationPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAffectedAccountsForOrganizationPagesWithContextReturnsOnCall[len(fake.describeAffectedAccountsForOrganizationPagesWithContextArgsForCall)]
	fake.describeAffectedAccountsForOrganizationPagesWithContextArgsForCall = append(fake.describeAffectedAccountsForOrganizationPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeAffectedAccountsForOrganizationInput
		arg3 func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeAffectedAccountsForOrganizationPagesWithContextStub
	fakeReturns := fake.describeAffectedAccountsForOrganizationPagesWithContextReturns
	fake.recordInvocation("DescribeAffectedAccountsForOrganizationPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeAffectedAccountsForOrganizationPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationPagesWithContextCallCount() int {
	fake.describeAffectedAccountsForOrganizationPagesWithContextMutex.RLock()
	defer fake.describeAffectedAccountsForOrganizationPagesWithContextMutex.RUnlock()
	return len(fake.describeAffectedAccountsForOrganizationPagesWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationPagesWithContextCalls(stub func(context.Context, *health.DescribeAffectedAccountsForOrganizationInput, func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) bool, ...request.Option) error) {
	fake.describeAffectedAccountsForOrganizationPagesWithContextMutex.Lock()
	defer fake.describeAffectedAccountsForOrganizationPagesWithContextMutex.Unlock()
	fake.DescribeAffectedAccountsForOrganizationPagesWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationPagesWithContextArgsForCall(i int) (context.Context, *health.DescribeAffectedAccountsForOrganizationInput, func(*health.DescribeAffectedAccountsForOrganizationOutput, bool) bool, []request.Option) {
	fake.describeAffectedAccountsForOrganizationPagesWithContextMutex.RLock()
	defer fake.describeAffectedAccountsForOrganizationPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeAffectedAccountsForOrganizationPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationPagesWithContextReturns(result1 error) {
	fake.describeAffectedAccountsForOrganizationPagesWithContextMutex.Lock()
	defer fake.describeAffectedAccountsForOrganizationPagesWithContextMutex.Unlock()
	fake.DescribeAffectedAccountsForOrganizationPagesWithContextStub = nil
	fake.describeAffectedAccountsForOrganizationPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeAffectedAccountsForOrganizationPagesWithContextMutex.Lock()
	defer fake.describeAffectedAccountsForOrganizationPagesWithContextMutex.Unlock()
	fake.DescribeAffectedAccountsForOrganizationPagesWithContextStub = nil
	if fake.describeAffectedAccountsForOrganizationPagesWithContextReturnsOnCall == nil {
		fake.describeAffectedAccountsForOrganizationPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAffectedAccountsForOrganizationPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationRequest(arg1 *health.DescribeAffectedAccountsForOrganizationInput) (*request.Request, *health.DescribeAffectedAccountsForOrganizationOutput) {
	fake.describeAffectedAccountsForOrganizationRequestMutex.Lock()
	ret, specificReturn := fake.describeAffectedAccountsForOrganizationRequestReturnsOnCall[len(fake.describeAffectedAccountsForOrganizationRequestArgsForCall)]
	fake.describeAffectedAccountsForOrganizationRequestArgsForCall = append(fake.describeAffectedAccountsForOrganizationRequestArgsForCall, struct {
		arg1 *health.DescribeAffectedAccountsForOrganizationInput
	}{arg1})
	stub := fake.DescribeAffectedAccountsForOrganizationRequestStub
	fakeReturns := fake.describeAffectedAccountsForOrganizationRequestReturns
	fake.recordInvocation("DescribeAffectedAccountsForOrganizationRequest", []interface{}{arg1})
	fake.describeAffectedAccountsForOrganizationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationRequestCallCount() int {
	fake.describeAffectedAccountsForOrganizationRequestMutex.RLock()
	defer fake.describeAffectedAccountsForOrganizationRequestMutex.RUnlock()
	return len(fake.describeAffectedAccountsForOrganizationRequestArgsForCall)
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationRequestCalls(stub func(*health.DescribeAffectedAccountsForOrganizationInput) (*request.Request, *health.DescribeAffectedAccountsForOrganizationOutput)) {
	fake.describeAffectedAccountsForOrganizationRequestMutex.Lock()
	defer fake.describeAffectedAccountsForOrganizationRequestMutex.Unlock()
	fake.DescribeAffectedAccountsForOrganizationRequestStub = stub
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationRequestArgsForCall(i int) *health.DescribeAffectedAccountsForOrganizationInput {
	fake.describeAffectedAccountsForOrganizationRequestMutex.RLock()
	defer fake.describeAffectedAccountsForOrganizationRequestMutex.RUnlock()
	argsForCall := fake.describeAffectedAccountsForOrganizationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationRequestReturns(result1 *request.Request, result2 *health.DescribeAffectedAccountsForOrganizationOutput) {
	fake.describeAffectedAccountsForOrganizationRequestMutex.Lock()
	defer fake.describeAffectedAccountsForOrganizationRequestMutex.Unlock()
	fake.DescribeAffectedAccountsForOrganizationRequestStub = nil
	fake.describeAffectedAccountsForOrganizationRequestReturns = struct {
		result1 *request.Request
		result2 *health.DescribeAffectedAccountsForOrganizationOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationRequestReturnsOnCall(i int, result1 *request.Request, result2 *health.DescribeAffectedAccountsForOrganizationOutput) {
	fake.describeAffectedAccountsForOrganizationRequestMutex.Lock()
	defer fake.describeAffectedAccountsForOrganizationRequestMutex.Unlock()
	fake.DescribeAffectedAccountsForOrganizationRequestStub = nil
	if fake.describeAffectedAccountsForOrganizationRequestReturnsOnCall == nil {
		fake.describeAffectedAccountsForOrganizationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *health.DescribeAffectedAccountsForOrganizationOutput
		})
	}
	fake.describeAffectedAccountsForOrganizationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *health.DescribeAffectedAccountsForOrganizationOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationWithContext(arg1 context.Context, arg2 *health.DescribeAffectedAccountsForOrganizationInput, arg3 ...request.Option) (*health.DescribeAffectedAccountsForOrganizationOutput, error) {
	fake.describeAffectedAccountsForOrganizationWithContextMutex.Lock()
	ret, specificReturn := fake.describeAffectedAccountsForOrganizationWithContextReturnsOnCall[len(fake.describeAffectedAccountsForOrganizationWithContextArgsForCall)]
	fake.describeAffectedAccountsForOrganizationWithContextArgsForCall = append(fake.describeAffectedAccountsForOrganizationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeAffectedAccountsForOrganizationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeAffectedAccountsForOrganizationWithContextStub
	fakeReturns := fake.describeAffectedAccountsForOrganizationWithContextReturns
	fake.recordInvocation("DescribeAffectedAccountsForOrganizationWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAffectedAccountsForOrganizationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationWithContextCallCount() int {
	fake.describeAffectedAccountsForOrganizationWithContextMutex.RLock()
	defer fake.describeAffectedAccountsForOrganizationWithContextMutex.RUnlock()
	return len(fake.describeAffectedAccountsForOrganizationWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationWithContextCalls(stub func(context.Context, *health.DescribeAffectedAccountsForOrganizationInput, ...request.Option) (*health.DescribeAffectedAccountsForOrganizationOutput, error)) {
	fake.describeAffectedAccountsForOrganizationWithContextMutex.Lock()
	defer fake.describeAffectedAccountsForOrganizationWithContextMutex.Unlock()
	fake.DescribeAffectedAccountsForOrganizationWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationWithContextArgsForCall(i int) (context.Context, *health.DescribeAffectedAccountsForOrganizationInput, []request.Option) {
	fake.describeAffectedAccountsForOrganizationWithContextMutex.RLock()
	defer fake.describeAffectedAccountsForOrganizationWithContextMutex.RUnlock()
	argsForCall := fake.describeAffectedAccountsForOrganizationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationWithContextReturns(result1 *health.DescribeAffectedAccountsForOrganizationOutput, result2 error) {
	fake.describeAffectedAccountsForOrganizationWithContextMutex.Lock()
	defer fake.describeAffectedAccountsForOrganizationWithContextMutex.Unlock()
	fake.DescribeAffectedAccountsForOrganizationWithContextStub = nil
	fake.describeAffectedAccountsForOrganizationWithContextReturns = struct {
		result1 *health.DescribeAffectedAccountsForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedAccountsForOrganizationWithContextReturnsOnCall(i int, result1 *health.DescribeAffectedAccountsForOrganizationOutput, result2 error) {
	fake.describeAffectedAccountsForOrganizationWithContextMutex.Lock()
	defer fake.describeAffectedAccountsForOrganizationWithContextMutex.Unlock()
	fake.DescribeAffectedAccountsForOrganizationWithContextStub = nil
	if fake.describeAffectedAccountsForOrganizationWithContextReturnsOnCall == nil {
		fake.describeAffectedAccountsForOrganizationWithContextReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeAffectedAccountsForOrganizationOutput
			result2 error
		})
	}
	fake.describeAffectedAccountsForOrganizationWithContextReturnsOnCall[i] = struct {
		result1 *health.DescribeAffectedAccountsForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedEntities(arg1 *health.DescribeAffectedEntitiesInput) (*health.DescribeAffectedEntitiesOutput, error) {
	fake.describeAffectedEntitiesMutex.Lock()
	ret, specificReturn := fake.describeAffectedEntitiesReturnsOnCall[len(fake.describeAffectedEntitiesArgsForCall)]
	fake.describeAffectedEntitiesArgsForCall = append(fake.describeAffectedEntitiesArgsForCall, struct {
		arg1 *health.DescribeAffectedEntitiesInput
	}{arg1})
	stub := fake.DescribeAffectedEntitiesStub
	fakeReturns := fake.describeAffectedEntitiesReturns
	fake.recordInvocation("DescribeAffectedEntities", []interface{}{arg1})
	fake.describeAffectedEntitiesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesCallCount() int {
	fake.describeAffectedEntitiesMutex.RLock()
	defer fake.describeAffectedEntitiesMutex.RUnlock()
	return len(fake.describeAffectedEntitiesArgsForCall)
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesCalls(stub func(*health.DescribeAffectedEntitiesInput) (*health.DescribeAffectedEntitiesOutput, error)) {
	fake.describeAffectedEntitiesMutex.Lock()
	defer fake.describeAffectedEntitiesMutex.Unlock()
	fake.DescribeAffectedEntitiesStub = stub
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesArgsForCall(i int) *health.DescribeAffectedEntitiesInput {
	fake.describeAffectedEntitiesMutex.RLock()
	defer fake.describeAffectedEntitiesMutex.RUnlock()
	argsForCall := fake.describeAffectedEntitiesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesReturns(result1 *health.DescribeAffectedEntitiesOutput, result2 error) {
	fake.describeAffectedEntitiesMutex.Lock()
	defer fake.describeAffectedEntitiesMutex.Unlock()
	fake.DescribeAffectedEntitiesStub = nil
	fake.describeAffectedEntitiesReturns = struct {
		result1 *health.DescribeAffectedEntitiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesReturnsOnCall(i int, result1 *health.DescribeAffectedEntitiesOutput, result2 error) {
	fake.describeAffectedEntitiesMutex.Lock()
	defer fake.describeAffectedEntitiesMutex.Unlock()
	fake.DescribeAffectedEntitiesStub = nil
	if fake.describeAffectedEntitiesReturnsOnCall == nil {
		fake.describeAffectedEntitiesReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeAffectedEntitiesOutput
			result2 error
		})
	}
	fake.describeAffectedEntitiesReturnsOnCall[i] = struct {
		result1 *health.DescribeAffectedEntitiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganization(arg1 *health.DescribeAffectedEntitiesForOrganizationInput) (*health.DescribeAffectedEntitiesForOrganizationOutput, error) {
	fake.describeAffectedEntitiesForOrganizationMutex.Lock()
	ret, specificReturn := fake.describeAffectedEntitiesForOrganizationReturnsOnCall[len(fake.describeAffectedEntitiesForOrganizationArgsForCall)]
	fake.describeAffectedEntitiesForOrganizationArgsForCall = append(fake.describeAffectedEntitiesForOrganizationArgsForCall, struct {
		arg1 *health.DescribeAffectedEntitiesForOrganizationInput
	}{arg1})
	stub := fake.DescribeAffectedEntitiesForOrganizationStub
	fakeReturns := fake.describeAffectedEntitiesForOrganizationReturns
	fake.recordInvocation("DescribeAffectedEntitiesForOrganization", []interface{}{arg1})
	fake.describeAffectedEntitiesForOrganizationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationCallCount() int {
	fake.describeAffectedEntitiesForOrganizationMutex.RLock()
	defer fake.describeAffectedEntitiesForOrganizationMutex.RUnlock()
	return len(fake.describeAffectedEntitiesForOrganizationArgsForCall)
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationCalls(stub func(*health.DescribeAffectedEntitiesForOrganizationInput) (*health.DescribeAffectedEntitiesForOrganizationOutput, error)) {
	fake.describeAffectedEntitiesForOrganizationMutex.Lock()
	defer fake.describeAffectedEntitiesForOrganizationMutex.Unlock()
	fake.DescribeAffectedEntitiesForOrganizationStub = stub
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationArgsForCall(i int) *health.DescribeAffectedEntitiesForOrganizationInput {
	fake.describeAffectedEntitiesForOrganizationMutex.RLock()
	defer fake.describeAffectedEntitiesForOrganizationMutex.RUnlock()
	argsForCall := fake.describeAffectedEntitiesForOrganizationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationReturns(result1 *health.DescribeAffectedEntitiesForOrganizationOutput, result2 error) {
	fake.describeAffectedEntitiesForOrganizationMutex.Lock()
	defer fake.describeAffectedEntitiesForOrganizationMutex.Unlock()
	fake.DescribeAffectedEntitiesForOrganizationStub = nil
	fake.describeAffectedEntitiesForOrganizationReturns = struct {
		result1 *health.DescribeAffectedEntitiesForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationReturnsOnCall(i int, result1 *health.DescribeAffectedEntitiesForOrganizationOutput, result2 error) {
	fake.describeAffectedEntitiesForOrganizationMutex.Lock()
	defer fake.describeAffectedEntitiesForOrganizationMutex.Unlock()
	fake.DescribeAffectedEntitiesForOrganizationStub = nil
	if fake.describeAffectedEntitiesForOrganizationReturnsOnCall == nil {
		fake.describeAffectedEntitiesForOrganizationReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeAffectedEntitiesForOrganizationOutput
			result2 error
		})
	}
	fake.describeAffectedEntitiesForOrganizationReturnsOnCall[i] = struct {
		result1 *health.DescribeAffectedEntitiesForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationPages(arg1 *health.DescribeAffectedEntitiesForOrganizationInput, arg2 func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) bool) error {
	fake.describeAffectedEntitiesForOrganizationPagesMutex.Lock()
	ret, specificReturn := fake.describeAffectedEntitiesForOrganizationPagesReturnsOnCall[len(fake.describeAffectedEntitiesForOrganizationPagesArgsForCall)]
	fake.describeAffectedEntitiesForOrganizationPagesArgsForCall = append(fake.describeAffectedEntitiesForOrganizationPagesArgsForCall, struct {
		arg1 *health.DescribeAffectedEntitiesForOrganizationInput
		arg2 func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeAffectedEntitiesForOrganizationPagesStub
	fakeReturns := fake.describeAffectedEntitiesForOrganizationPagesReturns
	fake.recordInvocation("DescribeAffectedEntitiesForOrganizationPages", []interface{}{arg1, arg2})
	fake.describeAffectedEntitiesForOrganizationPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationPagesCallCount() int {
	fake.describeAffectedEntitiesForOrganizationPagesMutex.RLock()
	defer fake.describeAffectedEntitiesForOrganizationPagesMutex.RUnlock()
	return len(fake.describeAffectedEntitiesForOrganizationPagesArgsForCall)
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationPagesCalls(stub func(*health.DescribeAffectedEntitiesForOrganizationInput, func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) bool) error) {
	fake.describeAffectedEntitiesForOrganizationPagesMutex.Lock()
	defer fake.describeAffectedEntitiesForOrganizationPagesMutex.Unlock()
	fake.DescribeAffectedEntitiesForOrganizationPagesStub = stub
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationPagesArgsForCall(i int) (*health.DescribeAffectedEntitiesForOrganizationInput, func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) bool) {
	fake.describeAffectedEntitiesForOrganizationPagesMutex.RLock()
	defer fake.describeAffectedEntitiesForOrganizationPagesMutex.RUnlock()
	argsForCall := fake.describeAffectedEntitiesForOrganizationPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationPagesReturns(result1 error) {
	fake.describeAffectedEntitiesForOrganizationPagesMutex.Lock()
	defer fake.describeAffectedEntitiesForOrganizationPagesMutex.Unlock()
	fake.DescribeAffectedEntitiesForOrganizationPagesStub = nil
	fake.describeAffectedEntitiesForOrganizationPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationPagesReturnsOnCall(i int, result1 error) {
	fake.describeAffectedEntitiesForOrganizationPagesMutex.Lock()
	defer fake.describeAffectedEntitiesForOrganizationPagesMutex.Unlock()
	fake.DescribeAffectedEntitiesForOrganizationPagesStub = nil
	if fake.describeAffectedEntitiesForOrganizationPagesReturnsOnCall == nil {
		fake.describeAffectedEntitiesForOrganizationPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAffectedEntitiesForOrganizationPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationPagesWithContext(arg1 context.Context, arg2 *health.DescribeAffectedEntitiesForOrganizationInput, arg3 func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeAffectedEntitiesForOrganizationPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAffectedEntitiesForOrganizationPagesWithContextReturnsOnCall[len(fake.describeAffectedEntitiesForOrganizationPagesWithContextArgsForCall)]
	fake.describeAffectedEntitiesForOrganizationPagesWithContextArgsForCall = append(fake.describeAffectedEntitiesForOrganizationPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeAffectedEntitiesForOrganizationInput
		arg3 func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeAffectedEntitiesForOrganizationPagesWithContextStub
	fakeReturns := fake.describeAffectedEntitiesForOrganizationPagesWithContextReturns
	fake.recordInvocation("DescribeAffectedEntitiesForOrganizationPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeAffectedEntitiesForOrganizationPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationPagesWithContextCallCount() int {
	fake.describeAffectedEntitiesForOrganizationPagesWithContextMutex.RLock()
	defer fake.describeAffectedEntitiesForOrganizationPagesWithContextMutex.RUnlock()
	return len(fake.describeAffectedEntitiesForOrganizationPagesWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationPagesWithContextCalls(stub func(context.Context, *health.DescribeAffectedEntitiesForOrganizationInput, func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) bool, ...request.Option) error) {
	fake.describeAffectedEntitiesForOrganizationPagesWithContextMutex.Lock()
	defer fake.describeAffectedEntitiesForOrganizationPagesWithContextMutex.Unlock()
	fake.DescribeAffectedEntitiesForOrganizationPagesWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationPagesWithContextArgsForCall(i int) (context.Context, *health.DescribeAffectedEntitiesForOrganizationInput, func(*health.DescribeAffectedEntitiesForOrganizationOutput, bool) bool, []request.Option) {
	fake.describeAffectedEntitiesForOrganizationPagesWithContextMutex.RLock()
	defer fake.describeAffectedEntitiesForOrganizationPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeAffectedEntitiesForOrganizationPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationPagesWithContextReturns(result1 error) {
	fake.describeAffectedEntitiesForOrganizationPagesWithContextMutex.Lock()
	defer fake.describeAffectedEntitiesForOrganizationPagesWithContextMutex.Unlock()
	fake.DescribeAffectedEntitiesForOrganizationPagesWithContextStub = nil
	fake.describeAffectedEntitiesForOrganizationPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeAffectedEntitiesForOrganizationPagesWithContextMutex.Lock()
	defer fake.describeAffectedEntitiesForOrganizationPagesWithContextMutex.Unlock()
	fake.DescribeAffectedEntitiesForOrganizationPagesWithContextStub = nil
	if fake.describeAffectedEntitiesForOrganizationPagesWithContextReturnsOnCall == nil {
		fake.describeAffectedEntitiesForOrganizationPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAffectedEntitiesForOrganizationPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationRequest(arg1 *health.DescribeAffectedEntitiesForOrganizationInput) (*request.Request, *health.DescribeAffectedEntitiesForOrganizationOutput) {
	fake.describeAffectedEntitiesForOrganizationRequestMutex.Lock()
	ret, specificReturn := fake.describeAffectedEntitiesForOrganizationRequestReturnsOnCall[len(fake.describeAffectedEntitiesForOrganizationRequestArgsForCall)]
	fake.describeAffectedEntitiesForOrganizationRequestArgsForCall = append(fake.describeAffectedEntitiesForOrganizationRequestArgsForCall, struct {
		arg1 *health.DescribeAffectedEntitiesForOrganizationInput
	}{arg1})
	stub := fake.DescribeAffectedEntitiesForOrganizationRequestStub
	fakeReturns := fake.describeAffectedEntitiesForOrganizationRequestReturns
	fake.recordInvocation("DescribeAffectedEntitiesForOrganizationRequest", []interface{}{arg1})
	fake.describeAffectedEntitiesForOrganizationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationRequestCallCount() int {
	fake.describeAffectedEntitiesForOrganizationRequestMutex.RLock()
	defer fake.describeAffectedEntitiesForOrganizationRequestMutex.RUnlock()
	return len(fake.describeAffectedEntitiesForOrganizationRequestArgsForCall)
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationRequestCalls(stub func(*health.DescribeAffectedEntitiesForOrganizationInput) (*request.Request, *health.DescribeAffectedEntitiesForOrganizationOutput)) {
	fake.describeAffectedEntitiesForOrganizationRequestMutex.Lock()
	defer fake.describeAffectedEntitiesForOrganizationRequestMutex.Unlock()
	fake.DescribeAffectedEntitiesForOrganizationRequestStub = stub
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationRequestArgsForCall(i int) *health.DescribeAffectedEntitiesForOrganizationInput {
	fake.describeAffectedEntitiesForOrganizationRequestMutex.RLock()
	defer fake.describeAffectedEntitiesForOrganizationRequestMutex.RUnlock()
	argsForCall := fake.describeAffectedEntitiesForOrganizationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationRequestReturns(result1 *request.Request, result2 *health.DescribeAffectedEntitiesForOrganizationOutput) {
	fake.describeAffectedEntitiesForOrganizationRequestMutex.Lock()
	defer fake.describeAffectedEntitiesForOrganizationRequestMutex.Unlock()
	fake.DescribeAffectedEntitiesForOrganizationRequestStub = nil
	fake.describeAffectedEntitiesForOrganizationRequestReturns = struct {
		result1 *request.Request
		result2 *health.DescribeAffectedEntitiesForOrganizationOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationRequestReturnsOnCall(i int, result1 *request.Request, result2 *health.DescribeAffectedEntitiesForOrganizationOutput) {
	fake.describeAffectedEntitiesForOrganizationRequestMutex.Lock()
	defer fake.describeAffectedEntitiesForOrganizationRequestMutex.Unlock()
	fake.DescribeAffectedEntitiesForOrganizationRequestStub = nil
	if fake.describeAffectedEntitiesForOrganizationRequestReturnsOnCall == nil {
		fake.describeAffectedEntitiesForOrganizationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *health.DescribeAffectedEntitiesForOrganizationOutput
		})
	}
	fake.describeAffectedEntitiesForOrganizationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *health.DescribeAffectedEntitiesForOrganizationOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationWithContext(arg1 context.Context, arg2 *health.DescribeAffectedEntitiesForOrganizationInput, arg3 ...request.Option) (*health.DescribeAffectedEntitiesForOrganizationOutput, error) {
	fake.describeAffectedEntitiesForOrganizationWithContextMutex.Lock()
	ret, specificReturn := fake.describeAffectedEntitiesForOrganizationWithContextReturnsOnCall[len(fake.describeAffectedEntitiesForOrganizationWithContextArgsForCall)]
	fake.describeAffectedEntitiesForOrganizationWithContextArgsForCall = append(fake.describeAffectedEntitiesForOrganizationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeAffectedEntitiesForOrganizationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeAffectedEntitiesForOrganizationWithContextStub
	fakeReturns := fake.describeAffectedEntitiesForOrganizationWithContextReturns
	fake.recordInvocation("DescribeAffectedEntitiesForOrganizationWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAffectedEntitiesForOrganizationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationWithContextCallCount() int {
	fake.describeAffectedEntitiesForOrganizationWithContextMutex.RLock()
	defer fake.describeAffectedEntitiesForOrganizationWithContextMutex.RUnlock()
	return len(fake.describeAffectedEntitiesForOrganizationWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationWithContextCalls(stub func(context.Context, *health.DescribeAffectedEntitiesForOrganizationInput, ...request.Option) (*health.DescribeAffectedEntitiesForOrganizationOutput, error)) {
	fake.describeAffectedEntitiesForOrganizationWithContextMutex.Lock()
	defer fake.describeAffectedEntitiesForOrganizationWithContextMutex.Unlock()
	fake.DescribeAffectedEntitiesForOrganizationWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationWithContextArgsForCall(i int) (context.Context, *health.DescribeAffectedEntitiesForOrganizationInput, []request.Option) {
	fake.describeAffectedEntitiesForOrganizationWithContextMutex.RLock()
	defer fake.describeAffectedEntitiesForOrganizationWithContextMutex.RUnlock()
	argsForCall := fake.describeAffectedEntitiesForOrganizationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationWithContextReturns(result1 *health.DescribeAffectedEntitiesForOrganizationOutput, result2 error) {
	fake.describeAffectedEntitiesForOrganizationWithContextMutex.Lock()
	defer fake.describeAffectedEntitiesForOrganizationWithContextMutex.Unlock()
	fake.DescribeAffectedEntitiesForOrganizationWithContextStub = nil
	fake.describeAffectedEntitiesForOrganizationWithContextReturns = struct {
		result1 *health.DescribeAffectedEntitiesForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesForOrganizationWithContextReturnsOnCall(i int, result1 *health.DescribeAffectedEntitiesForOrganizationOutput, result2 error) {
	fake.describeAffectedEntitiesForOrganizationWithContextMutex.Lock()
	defer fake.describeAffectedEntitiesForOrganizationWithContextMutex.Unlock()
	fake.DescribeAffectedEntitiesForOrganizationWithContextStub = nil
	if fake.describeAffectedEntitiesForOrganizationWithContextReturnsOnCall == nil {
		fake.describeAffectedEntitiesForOrganizationWithContextReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeAffectedEntitiesForOrganizationOutput
			result2 error
		})
	}
	fake.describeAffectedEntitiesForOrganizationWithContextReturnsOnCall[i] = struct {
		result1 *health.DescribeAffectedEntitiesForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesPages(arg1 *health.DescribeAffectedEntitiesInput, arg2 func(*health.DescribeAffectedEntitiesOutput, bool) bool) error {
	fake.describeAffectedEntitiesPagesMutex.Lock()
	ret, specificReturn := fake.describeAffectedEntitiesPagesReturnsOnCall[len(fake.describeAffectedEntitiesPagesArgsForCall)]
	fake.describeAffectedEntitiesPagesArgsForCall = append(fake.describeAffectedEntitiesPagesArgsForCall, struct {
		arg1 *health.DescribeAffectedEntitiesInput
		arg2 func(*health.DescribeAffectedEntitiesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeAffectedEntitiesPagesStub
	fakeReturns := fake.describeAffectedEntitiesPagesReturns
	fake.recordInvocation("DescribeAffectedEntitiesPages", []interface{}{arg1, arg2})
	fake.describeAffectedEntitiesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesPagesCallCount() int {
	fake.describeAffectedEntitiesPagesMutex.RLock()
	defer fake.describeAffectedEntitiesPagesMutex.RUnlock()
	return len(fake.describeAffectedEntitiesPagesArgsForCall)
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesPagesCalls(stub func(*health.DescribeAffectedEntitiesInput, func(*health.DescribeAffectedEntitiesOutput, bool) bool) error) {
	fake.describeAffectedEntitiesPagesMutex.Lock()
	defer fake.describeAffectedEntitiesPagesMutex.Unlock()
	fake.DescribeAffectedEntitiesPagesStub = stub
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesPagesArgsForCall(i int) (*health.DescribeAffectedEntitiesInput, func(*health.DescribeAffectedEntitiesOutput, bool) bool) {
	fake.describeAffectedEntitiesPagesMutex.RLock()
	defer fake.describeAffectedEntitiesPagesMutex.RUnlock()
	argsForCall := fake.describeAffectedEntitiesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesPagesReturns(result1 error) {
	fake.describeAffectedEntitiesPagesMutex.Lock()
	defer fake.describeAffectedEntitiesPagesMutex.Unlock()
	fake.DescribeAffectedEntitiesPagesStub = nil
	fake.describeAffectedEntitiesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesPagesReturnsOnCall(i int, result1 error) {
	fake.describeAffectedEntitiesPagesMutex.Lock()
	defer fake.describeAffectedEntitiesPagesMutex.Unlock()
	fake.DescribeAffectedEntitiesPagesStub = nil
	if fake.describeAffectedEntitiesPagesReturnsOnCall == nil {
		fake.describeAffectedEntitiesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAffectedEntitiesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesPagesWithContext(arg1 context.Context, arg2 *health.DescribeAffectedEntitiesInput, arg3 func(*health.DescribeAffectedEntitiesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeAffectedEntitiesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAffectedEntitiesPagesWithContextReturnsOnCall[len(fake.describeAffectedEntitiesPagesWithContextArgsForCall)]
	fake.describeAffectedEntitiesPagesWithContextArgsForCall = append(fake.describeAffectedEntitiesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeAffectedEntitiesInput
		arg3 func(*health.DescribeAffectedEntitiesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeAffectedEntitiesPagesWithContextStub
	fakeReturns := fake.describeAffectedEntitiesPagesWithContextReturns
	fake.recordInvocation("DescribeAffectedEntitiesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeAffectedEntitiesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesPagesWithContextCallCount() int {
	fake.describeAffectedEntitiesPagesWithContextMutex.RLock()
	defer fake.describeAffectedEntitiesPagesWithContextMutex.RUnlock()
	return len(fake.describeAffectedEntitiesPagesWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesPagesWithContextCalls(stub func(context.Context, *health.DescribeAffectedEntitiesInput, func(*health.DescribeAffectedEntitiesOutput, bool) bool, ...request.Option) error) {
	fake.describeAffectedEntitiesPagesWithContextMutex.Lock()
	defer fake.describeAffectedEntitiesPagesWithContextMutex.Unlock()
	fake.DescribeAffectedEntitiesPagesWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesPagesWithContextArgsForCall(i int) (context.Context, *health.DescribeAffectedEntitiesInput, func(*health.DescribeAffectedEntitiesOutput, bool) bool, []request.Option) {
	fake.describeAffectedEntitiesPagesWithContextMutex.RLock()
	defer fake.describeAffectedEntitiesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeAffectedEntitiesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesPagesWithContextReturns(result1 error) {
	fake.describeAffectedEntitiesPagesWithContextMutex.Lock()
	defer fake.describeAffectedEntitiesPagesWithContextMutex.Unlock()
	fake.DescribeAffectedEntitiesPagesWithContextStub = nil
	fake.describeAffectedEntitiesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeAffectedEntitiesPagesWithContextMutex.Lock()
	defer fake.describeAffectedEntitiesPagesWithContextMutex.Unlock()
	fake.DescribeAffectedEntitiesPagesWithContextStub = nil
	if fake.describeAffectedEntitiesPagesWithContextReturnsOnCall == nil {
		fake.describeAffectedEntitiesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAffectedEntitiesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesRequest(arg1 *health.DescribeAffectedEntitiesInput) (*request.Request, *health.DescribeAffectedEntitiesOutput) {
	fake.describeAffectedEntitiesRequestMutex.Lock()
	ret, specificReturn := fake.describeAffectedEntitiesRequestReturnsOnCall[len(fake.describeAffectedEntitiesRequestArgsForCall)]
	fake.describeAffectedEntitiesRequestArgsForCall = append(fake.describeAffectedEntitiesRequestArgsForCall, struct {
		arg1 *health.DescribeAffectedEntitiesInput
	}{arg1})
	stub := fake.DescribeAffectedEntitiesRequestStub
	fakeReturns := fake.describeAffectedEntitiesRequestReturns
	fake.recordInvocation("DescribeAffectedEntitiesRequest", []interface{}{arg1})
	fake.describeAffectedEntitiesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesRequestCallCount() int {
	fake.describeAffectedEntitiesRequestMutex.RLock()
	defer fake.describeAffectedEntitiesRequestMutex.RUnlock()
	return len(fake.describeAffectedEntitiesRequestArgsForCall)
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesRequestCalls(stub func(*health.DescribeAffectedEntitiesInput) (*request.Request, *health.DescribeAffectedEntitiesOutput)) {
	fake.describeAffectedEntitiesRequestMutex.Lock()
	defer fake.describeAffectedEntitiesRequestMutex.Unlock()
	fake.DescribeAffectedEntitiesRequestStub = stub
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesRequestArgsForCall(i int) *health.DescribeAffectedEntitiesInput {
	fake.describeAffectedEntitiesRequestMutex.RLock()
	defer fake.describeAffectedEntitiesRequestMutex.RUnlock()
	argsForCall := fake.describeAffectedEntitiesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesRequestReturns(result1 *request.Request, result2 *health.DescribeAffectedEntitiesOutput) {
	fake.describeAffectedEntitiesRequestMutex.Lock()
	defer fake.describeAffectedEntitiesRequestMutex.Unlock()
	fake.DescribeAffectedEntitiesRequestStub = nil
	fake.describeAffectedEntitiesRequestReturns = struct {
		result1 *request.Request
		result2 *health.DescribeAffectedEntitiesOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesRequestReturnsOnCall(i int, result1 *request.Request, result2 *health.DescribeAffectedEntitiesOutput) {
	fake.describeAffectedEntitiesRequestMutex.Lock()
	defer fake.describeAffectedEntitiesRequestMutex.Unlock()
	fake.DescribeAffectedEntitiesRequestStub = nil
	if fake.describeAffectedEntitiesRequestReturnsOnCall == nil {
		fake.describeAffectedEntitiesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *health.DescribeAffectedEntitiesOutput
		})
	}
	fake.describeAffectedEntitiesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *health.DescribeAffectedEntitiesOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesWithContext(arg1 context.Context, arg2 *health.DescribeAffectedEntitiesInput, arg3 ...request.Option) (*health.DescribeAffectedEntitiesOutput, error) {
	fake.describeAffectedEntitiesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAffectedEntitiesWithContextReturnsOnCall[len(fake.describeAffectedEntitiesWithContextArgsForCall)]
	fake.describeAffectedEntitiesWithContextArgsForCall = append(fake.describeAffectedEntitiesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeAffectedEntitiesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeAffectedEntitiesWithContextStub
	fakeReturns := fake.describeAffectedEntitiesWithContextReturns
	fake.recordInvocation("DescribeAffectedEntitiesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAffectedEntitiesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesWithContextCallCount() int {
	fake.describeAffectedEntitiesWithContextMutex.RLock()
	defer fake.describeAffectedEntitiesWithContextMutex.RUnlock()
	return len(fake.describeAffectedEntitiesWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesWithContextCalls(stub func(context.Context, *health.DescribeAffectedEntitiesInput, ...request.Option) (*health.DescribeAffectedEntitiesOutput, error)) {
	fake.describeAffectedEntitiesWithContextMutex.Lock()
	defer fake.describeAffectedEntitiesWithContextMutex.Unlock()
	fake.DescribeAffectedEntitiesWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesWithContextArgsForCall(i int) (context.Context, *health.DescribeAffectedEntitiesInput, []request.Option) {
	fake.describeAffectedEntitiesWithContextMutex.RLock()
	defer fake.describeAffectedEntitiesWithContextMutex.RUnlock()
	argsForCall := fake.describeAffectedEntitiesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesWithContextReturns(result1 *health.DescribeAffectedEntitiesOutput, result2 error) {
	fake.describeAffectedEntitiesWithContextMutex.Lock()
	defer fake.describeAffectedEntitiesWithContextMutex.Unlock()
	fake.DescribeAffectedEntitiesWithContextStub = nil
	fake.describeAffectedEntitiesWithContextReturns = struct {
		result1 *health.DescribeAffectedEntitiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeAffectedEntitiesWithContextReturnsOnCall(i int, result1 *health.DescribeAffectedEntitiesOutput, result2 error) {
	fake.describeAffectedEntitiesWithContextMutex.Lock()
	defer fake.describeAffectedEntitiesWithContextMutex.Unlock()
	fake.DescribeAffectedEntitiesWithContextStub = nil
	if fake.describeAffectedEntitiesWithContextReturnsOnCall == nil {
		fake.describeAffectedEntitiesWithContextReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeAffectedEntitiesOutput
			result2 error
		})
	}
	fake.describeAffectedEntitiesWithContextReturnsOnCall[i] = struct {
		result1 *health.DescribeAffectedEntitiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEntityAggregates(arg1 *health.DescribeEntityAggregatesInput) (*health.DescribeEntityAggregatesOutput, error) {
	fake.describeEntityAggregatesMutex.Lock()
	ret, specificReturn := fake.describeEntityAggregatesReturnsOnCall[len(fake.describeEntityAggregatesArgsForCall)]
	fake.describeEntityAggregatesArgsForCall = append(fake.describeEntityAggregatesArgsForCall, struct {
		arg1 *health.DescribeEntityAggregatesInput
	}{arg1})
	stub := fake.DescribeEntityAggregatesStub
	fakeReturns := fake.describeEntityAggregatesReturns
	fake.recordInvocation("DescribeEntityAggregates", []interface{}{arg1})
	fake.describeEntityAggregatesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesCallCount() int {
	fake.describeEntityAggregatesMutex.RLock()
	defer fake.describeEntityAggregatesMutex.RUnlock()
	return len(fake.describeEntityAggregatesArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesCalls(stub func(*health.DescribeEntityAggregatesInput) (*health.DescribeEntityAggregatesOutput, error)) {
	fake.describeEntityAggregatesMutex.Lock()
	defer fake.describeEntityAggregatesMutex.Unlock()
	fake.DescribeEntityAggregatesStub = stub
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesArgsForCall(i int) *health.DescribeEntityAggregatesInput {
	fake.describeEntityAggregatesMutex.RLock()
	defer fake.describeEntityAggregatesMutex.RUnlock()
	argsForCall := fake.describeEntityAggregatesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesReturns(result1 *health.DescribeEntityAggregatesOutput, result2 error) {
	fake.describeEntityAggregatesMutex.Lock()
	defer fake.describeEntityAggregatesMutex.Unlock()
	fake.DescribeEntityAggregatesStub = nil
	fake.describeEntityAggregatesReturns = struct {
		result1 *health.DescribeEntityAggregatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesReturnsOnCall(i int, result1 *health.DescribeEntityAggregatesOutput, result2 error) {
	fake.describeEntityAggregatesMutex.Lock()
	defer fake.describeEntityAggregatesMutex.Unlock()
	fake.DescribeEntityAggregatesStub = nil
	if fake.describeEntityAggregatesReturnsOnCall == nil {
		fake.describeEntityAggregatesReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeEntityAggregatesOutput
			result2 error
		})
	}
	fake.describeEntityAggregatesReturnsOnCall[i] = struct {
		result1 *health.DescribeEntityAggregatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesRequest(arg1 *health.DescribeEntityAggregatesInput) (*request.Request, *health.DescribeEntityAggregatesOutput) {
	fake.describeEntityAggregatesRequestMutex.Lock()
	ret, specificReturn := fake.describeEntityAggregatesRequestReturnsOnCall[len(fake.describeEntityAggregatesRequestArgsForCall)]
	fake.describeEntityAggregatesRequestArgsForCall = append(fake.describeEntityAggregatesRequestArgsForCall, struct {
		arg1 *health.DescribeEntityAggregatesInput
	}{arg1})
	stub := fake.DescribeEntityAggregatesRequestStub
	fakeReturns := fake.describeEntityAggregatesRequestReturns
	fake.recordInvocation("DescribeEntityAggregatesRequest", []interface{}{arg1})
	fake.describeEntityAggregatesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesRequestCallCount() int {
	fake.describeEntityAggregatesRequestMutex.RLock()
	defer fake.describeEntityAggregatesRequestMutex.RUnlock()
	return len(fake.describeEntityAggregatesRequestArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesRequestCalls(stub func(*health.DescribeEntityAggregatesInput) (*request.Request, *health.DescribeEntityAggregatesOutput)) {
	fake.describeEntityAggregatesRequestMutex.Lock()
	defer fake.describeEntityAggregatesRequestMutex.Unlock()
	fake.DescribeEntityAggregatesRequestStub = stub
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesRequestArgsForCall(i int) *health.DescribeEntityAggregatesInput {
	fake.describeEntityAggregatesRequestMutex.RLock()
	defer fake.describeEntityAggregatesRequestMutex.RUnlock()
	argsForCall := fake.describeEntityAggregatesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesRequestReturns(result1 *request.Request, result2 *health.DescribeEntityAggregatesOutput) {
	fake.describeEntityAggregatesRequestMutex.Lock()
	defer fake.describeEntityAggregatesRequestMutex.Unlock()
	fake.DescribeEntityAggregatesRequestStub = nil
	fake.describeEntityAggregatesRequestReturns = struct {
		result1 *request.Request
		result2 *health.DescribeEntityAggregatesOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesRequestReturnsOnCall(i int, result1 *request.Request, result2 *health.DescribeEntityAggregatesOutput) {
	fake.describeEntityAggregatesRequestMutex.Lock()
	defer fake.describeEntityAggregatesRequestMutex.Unlock()
	fake.DescribeEntityAggregatesRequestStub = nil
	if fake.describeEntityAggregatesRequestReturnsOnCall == nil {
		fake.describeEntityAggregatesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *health.DescribeEntityAggregatesOutput
		})
	}
	fake.describeEntityAggregatesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *health.DescribeEntityAggregatesOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesWithContext(arg1 context.Context, arg2 *health.DescribeEntityAggregatesInput, arg3 ...request.Option) (*health.DescribeEntityAggregatesOutput, error) {
	fake.describeEntityAggregatesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEntityAggregatesWithContextReturnsOnCall[len(fake.describeEntityAggregatesWithContextArgsForCall)]
	fake.describeEntityAggregatesWithContextArgsForCall = append(fake.describeEntityAggregatesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeEntityAggregatesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEntityAggregatesWithContextStub
	fakeReturns := fake.describeEntityAggregatesWithContextReturns
	fake.recordInvocation("DescribeEntityAggregatesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEntityAggregatesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesWithContextCallCount() int {
	fake.describeEntityAggregatesWithContextMutex.RLock()
	defer fake.describeEntityAggregatesWithContextMutex.RUnlock()
	return len(fake.describeEntityAggregatesWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesWithContextCalls(stub func(context.Context, *health.DescribeEntityAggregatesInput, ...request.Option) (*health.DescribeEntityAggregatesOutput, error)) {
	fake.describeEntityAggregatesWithContextMutex.Lock()
	defer fake.describeEntityAggregatesWithContextMutex.Unlock()
	fake.DescribeEntityAggregatesWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesWithContextArgsForCall(i int) (context.Context, *health.DescribeEntityAggregatesInput, []request.Option) {
	fake.describeEntityAggregatesWithContextMutex.RLock()
	defer fake.describeEntityAggregatesWithContextMutex.RUnlock()
	argsForCall := fake.describeEntityAggregatesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesWithContextReturns(result1 *health.DescribeEntityAggregatesOutput, result2 error) {
	fake.describeEntityAggregatesWithContextMutex.Lock()
	defer fake.describeEntityAggregatesWithContextMutex.Unlock()
	fake.DescribeEntityAggregatesWithContextStub = nil
	fake.describeEntityAggregatesWithContextReturns = struct {
		result1 *health.DescribeEntityAggregatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEntityAggregatesWithContextReturnsOnCall(i int, result1 *health.DescribeEntityAggregatesOutput, result2 error) {
	fake.describeEntityAggregatesWithContextMutex.Lock()
	defer fake.describeEntityAggregatesWithContextMutex.Unlock()
	fake.DescribeEntityAggregatesWithContextStub = nil
	if fake.describeEntityAggregatesWithContextReturnsOnCall == nil {
		fake.describeEntityAggregatesWithContextReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeEntityAggregatesOutput
			result2 error
		})
	}
	fake.describeEntityAggregatesWithContextReturnsOnCall[i] = struct {
		result1 *health.DescribeEntityAggregatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventAggregates(arg1 *health.DescribeEventAggregatesInput) (*health.DescribeEventAggregatesOutput, error) {
	fake.describeEventAggregatesMutex.Lock()
	ret, specificReturn := fake.describeEventAggregatesReturnsOnCall[len(fake.describeEventAggregatesArgsForCall)]
	fake.describeEventAggregatesArgsForCall = append(fake.describeEventAggregatesArgsForCall, struct {
		arg1 *health.DescribeEventAggregatesInput
	}{arg1})
	stub := fake.DescribeEventAggregatesStub
	fakeReturns := fake.describeEventAggregatesReturns
	fake.recordInvocation("DescribeEventAggregates", []interface{}{arg1})
	fake.describeEventAggregatesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventAggregatesCallCount() int {
	fake.describeEventAggregatesMutex.RLock()
	defer fake.describeEventAggregatesMutex.RUnlock()
	return len(fake.describeEventAggregatesArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventAggregatesCalls(stub func(*health.DescribeEventAggregatesInput) (*health.DescribeEventAggregatesOutput, error)) {
	fake.describeEventAggregatesMutex.Lock()
	defer fake.describeEventAggregatesMutex.Unlock()
	fake.DescribeEventAggregatesStub = stub
}

func (fake *FakeHealthAPI) DescribeEventAggregatesArgsForCall(i int) *health.DescribeEventAggregatesInput {
	fake.describeEventAggregatesMutex.RLock()
	defer fake.describeEventAggregatesMutex.RUnlock()
	argsForCall := fake.describeEventAggregatesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeEventAggregatesReturns(result1 *health.DescribeEventAggregatesOutput, result2 error) {
	fake.describeEventAggregatesMutex.Lock()
	defer fake.describeEventAggregatesMutex.Unlock()
	fake.DescribeEventAggregatesStub = nil
	fake.describeEventAggregatesReturns = struct {
		result1 *health.DescribeEventAggregatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventAggregatesReturnsOnCall(i int, result1 *health.DescribeEventAggregatesOutput, result2 error) {
	fake.describeEventAggregatesMutex.Lock()
	defer fake.describeEventAggregatesMutex.Unlock()
	fake.DescribeEventAggregatesStub = nil
	if fake.describeEventAggregatesReturnsOnCall == nil {
		fake.describeEventAggregatesReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeEventAggregatesOutput
			result2 error
		})
	}
	fake.describeEventAggregatesReturnsOnCall[i] = struct {
		result1 *health.DescribeEventAggregatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventAggregatesPages(arg1 *health.DescribeEventAggregatesInput, arg2 func(*health.DescribeEventAggregatesOutput, bool) bool) error {
	fake.describeEventAggregatesPagesMutex.Lock()
	ret, specificReturn := fake.describeEventAggregatesPagesReturnsOnCall[len(fake.describeEventAggregatesPagesArgsForCall)]
	fake.describeEventAggregatesPagesArgsForCall = append(fake.describeEventAggregatesPagesArgsForCall, struct {
		arg1 *health.DescribeEventAggregatesInput
		arg2 func(*health.DescribeEventAggregatesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeEventAggregatesPagesStub
	fakeReturns := fake.describeEventAggregatesPagesReturns
	fake.recordInvocation("DescribeEventAggregatesPages", []interface{}{arg1, arg2})
	fake.describeEventAggregatesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthAPI) DescribeEventAggregatesPagesCallCount() int {
	fake.describeEventAggregatesPagesMutex.RLock()
	defer fake.describeEventAggregatesPagesMutex.RUnlock()
	return len(fake.describeEventAggregatesPagesArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventAggregatesPagesCalls(stub func(*health.DescribeEventAggregatesInput, func(*health.DescribeEventAggregatesOutput, bool) bool) error) {
	fake.describeEventAggregatesPagesMutex.Lock()
	defer fake.describeEventAggregatesPagesMutex.Unlock()
	fake.DescribeEventAggregatesPagesStub = stub
}

func (fake *FakeHealthAPI) DescribeEventAggregatesPagesArgsForCall(i int) (*health.DescribeEventAggregatesInput, func(*health.DescribeEventAggregatesOutput, bool) bool) {
	fake.describeEventAggregatesPagesMutex.RLock()
	defer fake.describeEventAggregatesPagesMutex.RUnlock()
	argsForCall := fake.describeEventAggregatesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHealthAPI) DescribeEventAggregatesPagesReturns(result1 error) {
	fake.describeEventAggregatesPagesMutex.Lock()
	defer fake.describeEventAggregatesPagesMutex.Unlock()
	fake.DescribeEventAggregatesPagesStub = nil
	fake.describeEventAggregatesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeEventAggregatesPagesReturnsOnCall(i int, result1 error) {
	fake.describeEventAggregatesPagesMutex.Lock()
	defer fake.describeEventAggregatesPagesMutex.Unlock()
	fake.DescribeEventAggregatesPagesStub = nil
	if fake.describeEventAggregatesPagesReturnsOnCall == nil {
		fake.describeEventAggregatesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEventAggregatesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeEventAggregatesPagesWithContext(arg1 context.Context, arg2 *health.DescribeEventAggregatesInput, arg3 func(*health.DescribeEventAggregatesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeEventAggregatesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventAggregatesPagesWithContextReturnsOnCall[len(fake.describeEventAggregatesPagesWithContextArgsForCall)]
	fake.describeEventAggregatesPagesWithContextArgsForCall = append(fake.describeEventAggregatesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeEventAggregatesInput
		arg3 func(*health.DescribeEventAggregatesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeEventAggregatesPagesWithContextStub
	fakeReturns := fake.describeEventAggregatesPagesWithContextReturns
	fake.recordInvocation("DescribeEventAggregatesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeEventAggregatesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthAPI) DescribeEventAggregatesPagesWithContextCallCount() int {
	fake.describeEventAggregatesPagesWithContextMutex.RLock()
	defer fake.describeEventAggregatesPagesWithContextMutex.RUnlock()
	return len(fake.describeEventAggregatesPagesWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventAggregatesPagesWithContextCalls(stub func(context.Context, *health.DescribeEventAggregatesInput, func(*health.DescribeEventAggregatesOutput, bool) bool, ...request.Option) error) {
	fake.describeEventAggregatesPagesWithContextMutex.Lock()
	defer fake.describeEventAggregatesPagesWithContextMutex.Unlock()
	fake.DescribeEventAggregatesPagesWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeEventAggregatesPagesWithContextArgsForCall(i int) (context.Context, *health.DescribeEventAggregatesInput, func(*health.DescribeEventAggregatesOutput, bool) bool, []request.Option) {
	fake.describeEventAggregatesPagesWithContextMutex.RLock()
	defer fake.describeEventAggregatesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeEventAggregatesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeHealthAPI) DescribeEventAggregatesPagesWithContextReturns(result1 error) {
	fake.describeEventAggregatesPagesWithContextMutex.Lock()
	defer fake.describeEventAggregatesPagesWithContextMutex.Unlock()
	fake.DescribeEventAggregatesPagesWithContextStub = nil
	fake.describeEventAggregatesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeEventAggregatesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeEventAggregatesPagesWithContextMutex.Lock()
	defer fake.describeEventAggregatesPagesWithContextMutex.Unlock()
	fake.DescribeEventAggregatesPagesWithContextStub = nil
	if fake.describeEventAggregatesPagesWithContextReturnsOnCall == nil {
		fake.describeEventAggregatesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEventAggregatesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeEventAggregatesRequest(arg1 *health.DescribeEventAggregatesInput) (*request.Request, *health.DescribeEventAggregatesOutput) {
	fake.describeEventAggregatesRequestMutex.Lock()
	ret, specificReturn := fake.describeEventAggregatesRequestReturnsOnCall[len(fake.describeEventAggregatesRequestArgsForCall)]
	fake.describeEventAggregatesRequestArgsForCall = append(fake.describeEventAggregatesRequestArgsForCall, struct {
		arg1 *health.DescribeEventAggregatesInput
	}{arg1})
	stub := fake.DescribeEventAggregatesRequestStub
	fakeReturns := fake.describeEventAggregatesRequestReturns
	fake.recordInvocation("DescribeEventAggregatesRequest", []interface{}{arg1})
	fake.describeEventAggregatesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventAggregatesRequestCallCount() int {
	fake.describeEventAggregatesRequestMutex.RLock()
	defer fake.describeEventAggregatesRequestMutex.RUnlock()
	return len(fake.describeEventAggregatesRequestArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventAggregatesRequestCalls(stub func(*health.DescribeEventAggregatesInput) (*request.Request, *health.DescribeEventAggregatesOutput)) {
	fake.describeEventAggregatesRequestMutex.Lock()
	defer fake.describeEventAggregatesRequestMutex.Unlock()
	fake.DescribeEventAggregatesRequestStub = stub
}

func (fake *FakeHealthAPI) DescribeEventAggregatesRequestArgsForCall(i int) *health.DescribeEventAggregatesInput {
	fake.describeEventAggregatesRequestMutex.RLock()
	defer fake.describeEventAggregatesRequestMutex.RUnlock()
	argsForCall := fake.describeEventAggregatesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeEventAggregatesRequestReturns(result1 *request.Request, result2 *health.DescribeEventAggregatesOutput) {
	fake.describeEventAggregatesRequestMutex.Lock()
	defer fake.describeEventAggregatesRequestMutex.Unlock()
	fake.DescribeEventAggregatesRequestStub = nil
	fake.describeEventAggregatesRequestReturns = struct {
		result1 *request.Request
		result2 *health.DescribeEventAggregatesOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventAggregatesRequestReturnsOnCall(i int, result1 *request.Request, result2 *health.DescribeEventAggregatesOutput) {
	fake.describeEventAggregatesRequestMutex.Lock()
	defer fake.describeEventAggregatesRequestMutex.Unlock()
	fake.DescribeEventAggregatesRequestStub = nil
	if fake.describeEventAggregatesRequestReturnsOnCall == nil {
		fake.describeEventAggregatesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *health.DescribeEventAggregatesOutput
		})
	}
	fake.describeEventAggregatesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *health.DescribeEventAggregatesOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventAggregatesWithContext(arg1 context.Context, arg2 *health.DescribeEventAggregatesInput, arg3 ...request.Option) (*health.DescribeEventAggregatesOutput, error) {
	fake.describeEventAggregatesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventAggregatesWithContextReturnsOnCall[len(fake.describeEventAggregatesWithContextArgsForCall)]
	fake.describeEventAggregatesWithContextArgsForCall = append(fake.describeEventAggregatesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeEventAggregatesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEventAggregatesWithContextStub
	fakeReturns := fake.describeEventAggregatesWithContextReturns
	fake.recordInvocation("DescribeEventAggregatesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEventAggregatesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventAggregatesWithContextCallCount() int {
	fake.describeEventAggregatesWithContextMutex.RLock()
	defer fake.describeEventAggregatesWithContextMutex.RUnlock()
	return len(fake.describeEventAggregatesWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventAggregatesWithContextCalls(stub func(context.Context, *health.DescribeEventAggregatesInput, ...request.Option) (*health.DescribeEventAggregatesOutput, error)) {
	fake.describeEventAggregatesWithContextMutex.Lock()
	defer fake.describeEventAggregatesWithContextMutex.Unlock()
	fake.DescribeEventAggregatesWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeEventAggregatesWithContextArgsForCall(i int) (context.Context, *health.DescribeEventAggregatesInput, []request.Option) {
	fake.describeEventAggregatesWithContextMutex.RLock()
	defer fake.describeEventAggregatesWithContextMutex.RUnlock()
	argsForCall := fake.describeEventAggregatesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHealthAPI) DescribeEventAggregatesWithContextReturns(result1 *health.DescribeEventAggregatesOutput, result2 error) {
	fake.describeEventAggregatesWithContextMutex.Lock()
	defer fake.describeEventAggregatesWithContextMutex.Unlock()
	fake.DescribeEventAggregatesWithContextStub = nil
	fake.describeEventAggregatesWithContextReturns = struct {
		result1 *health.DescribeEventAggregatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventAggregatesWithContextReturnsOnCall(i int, result1 *health.DescribeEventAggregatesOutput, result2 error) {
	fake.describeEventAggregatesWithContextMutex.Lock()
	defer fake.describeEventAggregatesWithContextMutex.Unlock()
	fake.DescribeEventAggregatesWithContextStub = nil
	if fake.describeEventAggregatesWithContextReturnsOnCall == nil {
		fake.describeEventAggregatesWithContextReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeEventAggregatesOutput
			result2 error
		})
	}
	fake.describeEventAggregatesWithContextReturnsOnCall[i] = struct {
		result1 *health.DescribeEventAggregatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventDetails(arg1 *health.DescribeEventDetailsInput) (*health.DescribeEventDetailsOutput, error) {
	fake.describeEventDetailsMutex.Lock()
	ret, specificReturn := fake.describeEventDetailsReturnsOnCall[len(fake.describeEventDetailsArgsForCall)]
	fake.describeEventDetailsArgsForCall = append(fake.describeEventDetailsArgsForCall, struct {
		arg1 *health.DescribeEventDetailsInput
	}{arg1})
	stub := fake.DescribeEventDetailsStub
	fakeReturns := fake.describeEventDetailsReturns
	fake.recordInvocation("DescribeEventDetails", []interface{}{arg1})
	fake.describeEventDetailsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventDetailsCallCount() int {
	fake.describeEventDetailsMutex.RLock()
	defer fake.describeEventDetailsMutex.RUnlock()
	return len(fake.describeEventDetailsArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventDetailsCalls(stub func(*health.DescribeEventDetailsInput) (*health.DescribeEventDetailsOutput, error)) {
	fake.describeEventDetailsMutex.Lock()
	defer fake.describeEventDetailsMutex.Unlock()
	fake.DescribeEventDetailsStub = stub
}

func (fake *FakeHealthAPI) DescribeEventDetailsArgsForCall(i int) *health.DescribeEventDetailsInput {
	fake.describeEventDetailsMutex.RLock()
	defer fake.describeEventDetailsMutex.RUnlock()
	argsForCall := fake.describeEventDetailsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeEventDetailsReturns(result1 *health.DescribeEventDetailsOutput, result2 error) {
	fake.describeEventDetailsMutex.Lock()
	defer fake.describeEventDetailsMutex.Unlock()
	fake.DescribeEventDetailsStub = nil
	fake.describeEventDetailsReturns = struct {
		result1 *health.DescribeEventDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventDetailsReturnsOnCall(i int, result1 *health.DescribeEventDetailsOutput, result2 error) {
	fake.describeEventDetailsMutex.Lock()
	defer fake.describeEventDetailsMutex.Unlock()
	fake.DescribeEventDetailsStub = nil
	if fake.describeEventDetailsReturnsOnCall == nil {
		fake.describeEventDetailsReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeEventDetailsOutput
			result2 error
		})
	}
	fake.describeEventDetailsReturnsOnCall[i] = struct {
		result1 *health.DescribeEventDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganization(arg1 *health.DescribeEventDetailsForOrganizationInput) (*health.DescribeEventDetailsForOrganizationOutput, error) {
	fake.describeEventDetailsForOrganizationMutex.Lock()
	ret, specificReturn := fake.describeEventDetailsForOrganizationReturnsOnCall[len(fake.describeEventDetailsForOrganizationArgsForCall)]
	fake.describeEventDetailsForOrganizationArgsForCall = append(fake.describeEventDetailsForOrganizationArgsForCall, struct {
		arg1 *health.DescribeEventDetailsForOrganizationInput
	}{arg1})
	stub := fake.DescribeEventDetailsForOrganizationStub
	fakeReturns := fake.describeEventDetailsForOrganizationReturns
	fake.recordInvocation("DescribeEventDetailsForOrganization", []interface{}{arg1})
	fake.describeEventDetailsForOrganizationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationCallCount() int {
	fake.describeEventDetailsForOrganizationMutex.RLock()
	defer fake.describeEventDetailsForOrganizationMutex.RUnlock()
	return len(fake.describeEventDetailsForOrganizationArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationCalls(stub func(*health.DescribeEventDetailsForOrganizationInput) (*health.DescribeEventDetailsForOrganizationOutput, error)) {
	fake.describeEventDetailsForOrganizationMutex.Lock()
	defer fake.describeEventDetailsForOrganizationMutex.Unlock()
	fake.DescribeEventDetailsForOrganizationStub = stub
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationArgsForCall(i int) *health.DescribeEventDetailsForOrganizationInput {
	fake.describeEventDetailsForOrganizationMutex.RLock()
	defer fake.describeEventDetailsForOrganizationMutex.RUnlock()
	argsForCall := fake.describeEventDetailsForOrganizationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationReturns(result1 *health.DescribeEventDetailsForOrganizationOutput, result2 error) {
	fake.describeEventDetailsForOrganizationMutex.Lock()
	defer fake.describeEventDetailsForOrganizationMutex.Unlock()
	fake.DescribeEventDetailsForOrganizationStub = nil
	fake.describeEventDetailsForOrganizationReturns = struct {
		result1 *health.DescribeEventDetailsForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationReturnsOnCall(i int, result1 *health.DescribeEventDetailsForOrganizationOutput, result2 error) {
	fake.describeEventDetailsForOrganizationMutex.Lock()
	defer fake.describeEventDetailsForOrganizationMutex.Unlock()
	fake.DescribeEventDetailsForOrganizationStub = nil
	if fake.describeEventDetailsForOrganizationReturnsOnCall == nil {
		fake.describeEventDetailsForOrganizationReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeEventDetailsForOrganizationOutput
			result2 error
		})
	}
	fake.describeEventDetailsForOrganizationReturnsOnCall[i] = struct {
		result1 *health.DescribeEventDetailsForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationRequest(arg1 *health.DescribeEventDetailsForOrganizationInput) (*request.Request, *health.DescribeEventDetailsForOrganizationOutput) {
	fake.describeEventDetailsForOrganizationRequestMutex.Lock()
	ret, specificReturn := fake.describeEventDetailsForOrganizationRequestReturnsOnCall[len(fake.describeEventDetailsForOrganizationRequestArgsForCall)]
	fake.describeEventDetailsForOrganizationRequestArgsForCall = append(fake.describeEventDetailsForOrganizationRequestArgsForCall, struct {
		arg1 *health.DescribeEventDetailsForOrganizationInput
	}{arg1})
	stub := fake.DescribeEventDetailsForOrganizationRequestStub
	fakeReturns := fake.describeEventDetailsForOrganizationRequestReturns
	fake.recordInvocation("DescribeEventDetailsForOrganizationRequest", []interface{}{arg1})
	fake.describeEventDetailsForOrganizationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationRequestCallCount() int {
	fake.describeEventDetailsForOrganizationRequestMutex.RLock()
	defer fake.describeEventDetailsForOrganizationRequestMutex.RUnlock()
	return len(fake.describeEventDetailsForOrganizationRequestArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationRequestCalls(stub func(*health.DescribeEventDetailsForOrganizationInput) (*request.Request, *health.DescribeEventDetailsForOrganizationOutput)) {
	fake.describeEventDetailsForOrganizationRequestMutex.Lock()
	defer fake.describeEventDetailsForOrganizationRequestMutex.Unlock()
	fake.DescribeEventDetailsForOrganizationRequestStub = stub
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationRequestArgsForCall(i int) *health.DescribeEventDetailsForOrganizationInput {
	fake.describeEventDetailsForOrganizationRequestMutex.RLock()
	defer fake.describeEventDetailsForOrganizationRequestMutex.RUnlock()
	argsForCall := fake.describeEventDetailsForOrganizationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationRequestReturns(result1 *request.Request, result2 *health.DescribeEventDetailsForOrganizationOutput) {
	fake.describeEventDetailsForOrganizationRequestMutex.Lock()
	defer fake.describeEventDetailsForOrganizationRequestMutex.Unlock()
	fake.DescribeEventDetailsForOrganizationRequestStub = nil
	fake.describeEventDetailsForOrganizationRequestReturns = struct {
		result1 *request.Request
		result2 *health.DescribeEventDetailsForOrganizationOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationRequestReturnsOnCall(i int, result1 *request.Request, result2 *health.DescribeEventDetailsForOrganizationOutput) {
	fake.describeEventDetailsForOrganizationRequestMutex.Lock()
	defer fake.describeEventDetailsForOrganizationRequestMutex.Unlock()
	fake.DescribeEventDetailsForOrganizationRequestStub = nil
	if fake.describeEventDetailsForOrganizationRequestReturnsOnCall == nil {
		fake.describeEventDetailsForOrganizationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *health.DescribeEventDetailsForOrganizationOutput
		})
	}
	fake.describeEventDetailsForOrganizationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *health.DescribeEventDetailsForOrganizationOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationWithContext(arg1 context.Context, arg2 *health.DescribeEventDetailsForOrganizationInput, arg3 ...request.Option) (*health.DescribeEventDetailsForOrganizationOutput, error) {
	fake.describeEventDetailsForOrganizationWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventDetailsForOrganizationWithContextReturnsOnCall[len(fake.describeEventDetailsForOrganizationWithContextArgsForCall)]
	fake.describeEventDetailsForOrganizationWithContextArgsForCall = append(fake.describeEventDetailsForOrganizationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeEventDetailsForOrganizationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEventDetailsForOrganizationWithContextStub
	fakeReturns := fake.describeEventDetailsForOrganizationWithContextReturns
	fake.recordInvocation("DescribeEventDetailsForOrganizationWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEventDetailsForOrganizationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationWithContextCallCount() int {
	fake.describeEventDetailsForOrganizationWithContextMutex.RLock()
	defer fake.describeEventDetailsForOrganizationWithContextMutex.RUnlock()
	return len(fake.describeEventDetailsForOrganizationWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationWithContextCalls(stub func(context.Context, *health.DescribeEventDetailsForOrganizationInput, ...request.Option) (*health.DescribeEventDetailsForOrganizationOutput, error)) {
	fake.describeEventDetailsForOrganizationWithContextMutex.Lock()
	defer fake.describeEventDetailsForOrganizationWithContextMutex.Unlock()
	fake.DescribeEventDetailsForOrganizationWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationWithContextArgsForCall(i int) (context.Context, *health.DescribeEventDetailsForOrganizationInput, []request.Option) {
	fake.describeEventDetailsForOrganizationWithContextMutex.RLock()
	defer fake.describeEventDetailsForOrganizationWithContextMutex.RUnlock()
	argsForCall := fake.describeEventDetailsForOrganizationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationWithContextReturns(result1 *health.DescribeEventDetailsForOrganizationOutput, result2 error) {
	fake.describeEventDetailsForOrganizationWithContextMutex.Lock()
	defer fake.describeEventDetailsForOrganizationWithContextMutex.Unlock()
	fake.DescribeEventDetailsForOrganizationWithContextStub = nil
	fake.describeEventDetailsForOrganizationWithContextReturns = struct {
		result1 *health.DescribeEventDetailsForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventDetailsForOrganizationWithContextReturnsOnCall(i int, result1 *health.DescribeEventDetailsForOrganizationOutput, result2 error) {
	fake.describeEventDetailsForOrganizationWithContextMutex.Lock()
	defer fake.describeEventDetailsForOrganizationWithContextMutex.Unlock()
	fake.DescribeEventDetailsForOrganizationWithContextStub = nil
	if fake.describeEventDetailsForOrganizationWithContextReturnsOnCall == nil {
		fake.describeEventDetailsForOrganizationWithContextReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeEventDetailsForOrganizationOutput
			result2 error
		})
	}
	fake.describeEventDetailsForOrganizationWithContextReturnsOnCall[i] = struct {
		result1 *health.DescribeEventDetailsForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventDetailsRequest(arg1 *health.DescribeEventDetailsInput) (*request.Request, *health.DescribeEventDetailsOutput) {
	fake.describeEventDetailsRequestMutex.Lock()
	ret, specificReturn := fake.describeEventDetailsRequestReturnsOnCall[len(fake.describeEventDetailsRequestArgsForCall)]
	fake.describeEventDetailsRequestArgsForCall = append(fake.describeEventDetailsRequestArgsForCall, struct {
		arg1 *health.DescribeEventDetailsInput
	}{arg1})
	stub := fake.DescribeEventDetailsRequestStub
	fakeReturns := fake.describeEventDetailsRequestReturns
	fake.recordInvocation("DescribeEventDetailsRequest", []interface{}{arg1})
	fake.describeEventDetailsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventDetailsRequestCallCount() int {
	fake.describeEventDetailsRequestMutex.RLock()
	defer fake.describeEventDetailsRequestMutex.RUnlock()
	return len(fake.describeEventDetailsRequestArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventDetailsRequestCalls(stub func(*health.DescribeEventDetailsInput) (*request.Request, *health.DescribeEventDetailsOutput)) {
	fake.describeEventDetailsRequestMutex.Lock()
	defer fake.describeEventDetailsRequestMutex.Unlock()
	fake.DescribeEventDetailsRequestStub = stub
}

func (fake *FakeHealthAPI) DescribeEventDetailsRequestArgsForCall(i int) *health.DescribeEventDetailsInput {
	fake.describeEventDetailsRequestMutex.RLock()
	defer fake.describeEventDetailsRequestMutex.RUnlock()
	argsForCall := fake.describeEventDetailsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeEventDetailsRequestReturns(result1 *request.Request, result2 *health.DescribeEventDetailsOutput) {
	fake.describeEventDetailsRequestMutex.Lock()
	defer fake.describeEventDetailsRequestMutex.Unlock()
	fake.DescribeEventDetailsRequestStub = nil
	fake.describeEventDetailsRequestReturns = struct {
		result1 *request.Request
		result2 *health.DescribeEventDetailsOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventDetailsRequestReturnsOnCall(i int, result1 *request.Request, result2 *health.DescribeEventDetailsOutput) {
	fake.describeEventDetailsRequestMutex.Lock()
	defer fake.describeEventDetailsRequestMutex.Unlock()
	fake.DescribeEventDetailsRequestStub = nil
	if fake.describeEventDetailsRequestReturnsOnCall == nil {
		fake.describeEventDetailsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *health.DescribeEventDetailsOutput
		})
	}
	fake.describeEventDetailsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *health.DescribeEventDetailsOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventDetailsWithContext(arg1 context.Context, arg2 *health.DescribeEventDetailsInput, arg3 ...request.Option) (*health.DescribeEventDetailsOutput, error) {
	fake.describeEventDetailsWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventDetailsWithContextReturnsOnCall[len(fake.describeEventDetailsWithContextArgsForCall)]
	fake.describeEventDetailsWithContextArgsForCall = append(fake.describeEventDetailsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeEventDetailsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEventDetailsWithContextStub
	fakeReturns := fake.describeEventDetailsWithContextReturns
	fake.recordInvocation("DescribeEventDetailsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEventDetailsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventDetailsWithContextCallCount() int {
	fake.describeEventDetailsWithContextMutex.RLock()
	defer fake.describeEventDetailsWithContextMutex.RUnlock()
	return len(fake.describeEventDetailsWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventDetailsWithContextCalls(stub func(context.Context, *health.DescribeEventDetailsInput, ...request.Option) (*health.DescribeEventDetailsOutput, error)) {
	fake.describeEventDetailsWithContextMutex.Lock()
	defer fake.describeEventDetailsWithContextMutex.Unlock()
	fake.DescribeEventDetailsWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeEventDetailsWithContextArgsForCall(i int) (context.Context, *health.DescribeEventDetailsInput, []request.Option) {
	fake.describeEventDetailsWithContextMutex.RLock()
	defer fake.describeEventDetailsWithContextMutex.RUnlock()
	argsForCall := fake.describeEventDetailsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHealthAPI) DescribeEventDetailsWithContextReturns(result1 *health.DescribeEventDetailsOutput, result2 error) {
	fake.describeEventDetailsWithContextMutex.Lock()
	defer fake.describeEventDetailsWithContextMutex.Unlock()
	fake.DescribeEventDetailsWithContextStub = nil
	fake.describeEventDetailsWithContextReturns = struct {
		result1 *health.DescribeEventDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventDetailsWithContextReturnsOnCall(i int, result1 *health.DescribeEventDetailsOutput, result2 error) {
	fake.describeEventDetailsWithContextMutex.Lock()
	defer fake.describeEventDetailsWithContextMutex.Unlock()
	fake.DescribeEventDetailsWithContextStub = nil
	if fake.describeEventDetailsWithContextReturnsOnCall == nil {
		fake.describeEventDetailsWithContextReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeEventDetailsOutput
			result2 error
		})
	}
	fake.describeEventDetailsWithContextReturnsOnCall[i] = struct {
		result1 *health.DescribeEventDetailsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventTypes(arg1 *health.DescribeEventTypesInput) (*health.DescribeEventTypesOutput, error) {
	fake.describeEventTypesMutex.Lock()
	ret, specificReturn := fake.describeEventTypesReturnsOnCall[len(fake.describeEventTypesArgsForCall)]
	fake.describeEventTypesArgsForCall = append(fake.describeEventTypesArgsForCall, struct {
		arg1 *health.DescribeEventTypesInput
	}{arg1})
	stub := fake.DescribeEventTypesStub
	fakeReturns := fake.describeEventTypesReturns
	fake.recordInvocation("DescribeEventTypes", []interface{}{arg1})
	fake.describeEventTypesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventTypesCallCount() int {
	fake.describeEventTypesMutex.RLock()
	defer fake.describeEventTypesMutex.RUnlock()
	return len(fake.describeEventTypesArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventTypesCalls(stub func(*health.DescribeEventTypesInput) (*health.DescribeEventTypesOutput, error)) {
	fake.describeEventTypesMutex.Lock()
	defer fake.describeEventTypesMutex.Unlock()
	fake.DescribeEventTypesStub = stub
}

func (fake *FakeHealthAPI) DescribeEventTypesArgsForCall(i int) *health.DescribeEventTypesInput {
	fake.describeEventTypesMutex.RLock()
	defer fake.describeEventTypesMutex.RUnlock()
	argsForCall := fake.describeEventTypesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeEventTypesReturns(result1 *health.DescribeEventTypesOutput, result2 error) {
	fake.describeEventTypesMutex.Lock()
	defer fake.describeEventTypesMutex.Unlock()
	fake.DescribeEventTypesStub = nil
	fake.describeEventTypesReturns = struct {
		result1 *health.DescribeEventTypesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventTypesReturnsOnCall(i int, result1 *health.DescribeEventTypesOutput, result2 error) {
	fake.describeEventTypesMutex.Lock()
	defer fake.describeEventTypesMutex.Unlock()
	fake.DescribeEventTypesStub = nil
	if fake.describeEventTypesReturnsOnCall == nil {
		fake.describeEventTypesReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeEventTypesOutput
			result2 error
		})
	}
	fake.describeEventTypesReturnsOnCall[i] = struct {
		result1 *health.DescribeEventTypesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventTypesPages(arg1 *health.DescribeEventTypesInput, arg2 func(*health.DescribeEventTypesOutput, bool) bool) error {
	fake.describeEventTypesPagesMutex.Lock()
	ret, specificReturn := fake.describeEventTypesPagesReturnsOnCall[len(fake.describeEventTypesPagesArgsForCall)]
	fake.describeEventTypesPagesArgsForCall = append(fake.describeEventTypesPagesArgsForCall, struct {
		arg1 *health.DescribeEventTypesInput
		arg2 func(*health.DescribeEventTypesOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeEventTypesPagesStub
	fakeReturns := fake.describeEventTypesPagesReturns
	fake.recordInvocation("DescribeEventTypesPages", []interface{}{arg1, arg2})
	fake.describeEventTypesPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthAPI) DescribeEventTypesPagesCallCount() int {
	fake.describeEventTypesPagesMutex.RLock()
	defer fake.describeEventTypesPagesMutex.RUnlock()
	return len(fake.describeEventTypesPagesArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventTypesPagesCalls(stub func(*health.DescribeEventTypesInput, func(*health.DescribeEventTypesOutput, bool) bool) error) {
	fake.describeEventTypesPagesMutex.Lock()
	defer fake.describeEventTypesPagesMutex.Unlock()
	fake.DescribeEventTypesPagesStub = stub
}

func (fake *FakeHealthAPI) DescribeEventTypesPagesArgsForCall(i int) (*health.DescribeEventTypesInput, func(*health.DescribeEventTypesOutput, bool) bool) {
	fake.describeEventTypesPagesMutex.RLock()
	defer fake.describeEventTypesPagesMutex.RUnlock()
	argsForCall := fake.describeEventTypesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHealthAPI) DescribeEventTypesPagesReturns(result1 error) {
	fake.describeEventTypesPagesMutex.Lock()
	defer fake.describeEventTypesPagesMutex.Unlock()
	fake.DescribeEventTypesPagesStub = nil
	fake.describeEventTypesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeEventTypesPagesReturnsOnCall(i int, result1 error) {
	fake.describeEventTypesPagesMutex.Lock()
	defer fake.describeEventTypesPagesMutex.Unlock()
	fake.DescribeEventTypesPagesStub = nil
	if fake.describeEventTypesPagesReturnsOnCall == nil {
		fake.describeEventTypesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEventTypesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeEventTypesPagesWithContext(arg1 context.Context, arg2 *health.DescribeEventTypesInput, arg3 func(*health.DescribeEventTypesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeEventTypesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventTypesPagesWithContextReturnsOnCall[len(fake.describeEventTypesPagesWithContextArgsForCall)]
	fake.describeEventTypesPagesWithContextArgsForCall = append(fake.describeEventTypesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeEventTypesInput
		arg3 func(*health.DescribeEventTypesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeEventTypesPagesWithContextStub
	fakeReturns := fake.describeEventTypesPagesWithContextReturns
	fake.recordInvocation("DescribeEventTypesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeEventTypesPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthAPI) DescribeEventTypesPagesWithContextCallCount() int {
	fake.describeEventTypesPagesWithContextMutex.RLock()
	defer fake.describeEventTypesPagesWithContextMutex.RUnlock()
	return len(fake.describeEventTypesPagesWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventTypesPagesWithContextCalls(stub func(context.Context, *health.DescribeEventTypesInput, func(*health.DescribeEventTypesOutput, bool) bool, ...request.Option) error) {
	fake.describeEventTypesPagesWithContextMutex.Lock()
	defer fake.describeEventTypesPagesWithContextMutex.Unlock()
	fake.DescribeEventTypesPagesWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeEventTypesPagesWithContextArgsForCall(i int) (context.Context, *health.DescribeEventTypesInput, func(*health.DescribeEventTypesOutput, bool) bool, []request.Option) {
	fake.describeEventTypesPagesWithContextMutex.RLock()
	defer fake.describeEventTypesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeEventTypesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeHealthAPI) DescribeEventTypesPagesWithContextReturns(result1 error) {
	fake.describeEventTypesPagesWithContextMutex.Lock()
	defer fake.describeEventTypesPagesWithContextMutex.Unlock()
	fake.DescribeEventTypesPagesWithContextStub = nil
	fake.describeEventTypesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeEventTypesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeEventTypesPagesWithContextMutex.Lock()
	defer fake.describeEventTypesPagesWithContextMutex.Unlock()
	fake.DescribeEventTypesPagesWithContextStub = nil
	if fake.describeEventTypesPagesWithContextReturnsOnCall == nil {
		fake.describeEventTypesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEventTypesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeEventTypesRequest(arg1 *health.DescribeEventTypesInput) (*request.Request, *health.DescribeEventTypesOutput) {
	fake.describeEventTypesRequestMutex.Lock()
	ret, specificReturn := fake.describeEventTypesRequestReturnsOnCall[len(fake.describeEventTypesRequestArgsForCall)]
	fake.describeEventTypesRequestArgsForCall = append(fake.describeEventTypesRequestArgsForCall, struct {
		arg1 *health.DescribeEventTypesInput
	}{arg1})
	stub := fake.DescribeEventTypesRequestStub
	fakeReturns := fake.describeEventTypesRequestReturns
	fake.recordInvocation("DescribeEventTypesRequest", []interface{}{arg1})
	fake.describeEventTypesRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventTypesRequestCallCount() int {
	fake.describeEventTypesRequestMutex.RLock()
	defer fake.describeEventTypesRequestMutex.RUnlock()
	return len(fake.describeEventTypesRequestArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventTypesRequestCalls(stub func(*health.DescribeEventTypesInput) (*request.Request, *health.DescribeEventTypesOutput)) {
	fake.describeEventTypesRequestMutex.Lock()
	defer fake.describeEventTypesRequestMutex.Unlock()
	fake.DescribeEventTypesRequestStub = stub
}

func (fake *FakeHealthAPI) DescribeEventTypesRequestArgsForCall(i int) *health.DescribeEventTypesInput {
	fake.describeEventTypesRequestMutex.RLock()
	defer fake.describeEventTypesRequestMutex.RUnlock()
	argsForCall := fake.describeEventTypesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeEventTypesRequestReturns(result1 *request.Request, result2 *health.DescribeEventTypesOutput) {
	fake.describeEventTypesRequestMutex.Lock()
	defer fake.describeEventTypesRequestMutex.Unlock()
	fake.DescribeEventTypesRequestStub = nil
	fake.describeEventTypesRequestReturns = struct {
		result1 *request.Request
		result2 *health.DescribeEventTypesOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventTypesRequestReturnsOnCall(i int, result1 *request.Request, result2 *health.DescribeEventTypesOutput) {
	fake.describeEventTypesRequestMutex.Lock()
	defer fake.describeEventTypesRequestMutex.Unlock()
	fake.DescribeEventTypesRequestStub = nil
	if fake.describeEventTypesRequestReturnsOnCall == nil {
		fake.describeEventTypesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *health.DescribeEventTypesOutput
		})
	}
	fake.describeEventTypesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *health.DescribeEventTypesOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventTypesWithContext(arg1 context.Context, arg2 *health.DescribeEventTypesInput, arg3 ...request.Option) (*health.DescribeEventTypesOutput, error) {
	fake.describeEventTypesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventTypesWithContextReturnsOnCall[len(fake.describeEventTypesWithContextArgsForCall)]
	fake.describeEventTypesWithContextArgsForCall = append(fake.describeEventTypesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeEventTypesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEventTypesWithContextStub
	fakeReturns := fake.describeEventTypesWithContextReturns
	fake.recordInvocation("DescribeEventTypesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEventTypesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventTypesWithContextCallCount() int {
	fake.describeEventTypesWithContextMutex.RLock()
	defer fake.describeEventTypesWithContextMutex.RUnlock()
	return len(fake.describeEventTypesWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventTypesWithContextCalls(stub func(context.Context, *health.DescribeEventTypesInput, ...request.Option) (*health.DescribeEventTypesOutput, error)) {
	fake.describeEventTypesWithContextMutex.Lock()
	defer fake.describeEventTypesWithContextMutex.Unlock()
	fake.DescribeEventTypesWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeEventTypesWithContextArgsForCall(i int) (context.Context, *health.DescribeEventTypesInput, []request.Option) {
	fake.describeEventTypesWithContextMutex.RLock()
	defer fake.describeEventTypesWithContextMutex.RUnlock()
	argsForCall := fake.describeEventTypesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHealthAPI) DescribeEventTypesWithContextReturns(result1 *health.DescribeEventTypesOutput, result2 error) {
	fake.describeEventTypesWithContextMutex.Lock()
	defer fake.describeEventTypesWithContextMutex.Unlock()
	fake.DescribeEventTypesWithContextStub = nil
	fake.describeEventTypesWithContextReturns = struct {
		result1 *health.DescribeEventTypesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventTypesWithContextReturnsOnCall(i int, result1 *health.DescribeEventTypesOutput, result2 error) {
	fake.describeEventTypesWithContextMutex.Lock()
	defer fake.describeEventTypesWithContextMutex.Unlock()
	fake.DescribeEventTypesWithContextStub = nil
	if fake.describeEventTypesWithContextReturnsOnCall == nil {
		fake.describeEventTypesWithContextReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeEventTypesOutput
			result2 error
		})
	}
	fake.describeEventTypesWithContextReturnsOnCall[i] = struct {
		result1 *health.DescribeEventTypesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEvents(arg1 *health.DescribeEventsInput) (*health.DescribeEventsOutput, error) {
	fake.describeEventsMutex.Lock()
	ret, specificReturn := fake.describeEventsReturnsOnCall[len(fake.describeEventsArgsForCall)]
	fake.describeEventsArgsForCall = append(fake.describeEventsArgsForCall, struct {
		arg1 *health.DescribeEventsInput
	}{arg1})
	stub := fake.DescribeEventsStub
	fakeReturns := fake.describeEventsReturns
	fake.recordInvocation("DescribeEvents", []interface{}{arg1})
	fake.describeEventsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventsCallCount() int {
	fake.describeEventsMutex.RLock()
	defer fake.describeEventsMutex.RUnlock()
	return len(fake.describeEventsArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventsCalls(stub func(*health.DescribeEventsInput) (*health.DescribeEventsOutput, error)) {
	fake.describeEventsMutex.Lock()
	defer fake.describeEventsMutex.Unlock()
	fake.DescribeEventsStub = stub
}

func (fake *FakeHealthAPI) DescribeEventsArgsForCall(i int) *health.DescribeEventsInput {
	fake.describeEventsMutex.RLock()
	defer fake.describeEventsMutex.RUnlock()
	argsForCall := fake.describeEventsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeEventsReturns(result1 *health.DescribeEventsOutput, result2 error) {
	fake.describeEventsMutex.Lock()
	defer fake.describeEventsMutex.Unlock()
	fake.DescribeEventsStub = nil
	fake.describeEventsReturns = struct {
		result1 *health.DescribeEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventsReturnsOnCall(i int, result1 *health.DescribeEventsOutput, result2 error) {
	fake.describeEventsMutex.Lock()
	defer fake.describeEventsMutex.Unlock()
	fake.DescribeEventsStub = nil
	if fake.describeEventsReturnsOnCall == nil {
		fake.describeEventsReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeEventsOutput
			result2 error
		})
	}
	fake.describeEventsReturnsOnCall[i] = struct {
		result1 *health.DescribeEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventsForOrganization(arg1 *health.DescribeEventsForOrganizationInput) (*health.DescribeEventsForOrganizationOutput, error) {
	fake.describeEventsForOrganizationMutex.Lock()
	ret, specificReturn := fake.describeEventsForOrganizationReturnsOnCall[len(fake.describeEventsForOrganizationArgsForCall)]
	fake.describeEventsForOrganizationArgsForCall = append(fake.describeEventsForOrganizationArgsForCall, struct {
		arg1 *health.DescribeEventsForOrganizationInput
	}{arg1})
	stub := fake.DescribeEventsForOrganizationStub
	fakeReturns := fake.describeEventsForOrganizationReturns
	fake.recordInvocation("DescribeEventsForOrganization", []interface{}{arg1})
	fake.describeEventsForOrganizationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationCallCount() int {
	fake.describeEventsForOrganizationMutex.RLock()
	defer fake.describeEventsForOrganizationMutex.RUnlock()
	return len(fake.describeEventsForOrganizationArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationCalls(stub func(*health.DescribeEventsForOrganizationInput) (*health.DescribeEventsForOrganizationOutput, error)) {
	fake.describeEventsForOrganizationMutex.Lock()
	defer fake.describeEventsForOrganizationMutex.Unlock()
	fake.DescribeEventsForOrganizationStub = stub
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationArgsForCall(i int) *health.DescribeEventsForOrganizationInput {
	fake.describeEventsForOrganizationMutex.RLock()
	defer fake.describeEventsForOrganizationMutex.RUnlock()
	argsForCall := fake.describeEventsForOrganizationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationReturns(result1 *health.DescribeEventsForOrganizationOutput, result2 error) {
	fake.describeEventsForOrganizationMutex.Lock()
	defer fake.describeEventsForOrganizationMutex.Unlock()
	fake.DescribeEventsForOrganizationStub = nil
	fake.describeEventsForOrganizationReturns = struct {
		result1 *health.DescribeEventsForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationReturnsOnCall(i int, result1 *health.DescribeEventsForOrganizationOutput, result2 error) {
	fake.describeEventsForOrganizationMutex.Lock()
	defer fake.describeEventsForOrganizationMutex.Unlock()
	fake.DescribeEventsForOrganizationStub = nil
	if fake.describeEventsForOrganizationReturnsOnCall == nil {
		fake.describeEventsForOrganizationReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeEventsForOrganizationOutput
			result2 error
		})
	}
	fake.describeEventsForOrganizationReturnsOnCall[i] = struct {
		result1 *health.DescribeEventsForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationPages(arg1 *health.DescribeEventsForOrganizationInput, arg2 func(*health.DescribeEventsForOrganizationOutput, bool) bool) error {
	fake.describeEventsForOrganizationPagesMutex.Lock()
	ret, specificReturn := fake.describeEventsForOrganizationPagesReturnsOnCall[len(fake.describeEventsForOrganizationPagesArgsForCall)]
	fake.describeEventsForOrganizationPagesArgsForCall = append(fake.describeEventsForOrganizationPagesArgsForCall, struct {
		arg1 *health.DescribeEventsForOrganizationInput
		arg2 func(*health.DescribeEventsForOrganizationOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeEventsForOrganizationPagesStub
	fakeReturns := fake.describeEventsForOrganizationPagesReturns
	fake.recordInvocation("DescribeEventsForOrganizationPages", []interface{}{arg1, arg2})
	fake.describeEventsForOrganizationPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationPagesCallCount() int {
	fake.describeEventsForOrganizationPagesMutex.RLock()
	defer fake.describeEventsForOrganizationPagesMutex.RUnlock()
	return len(fake.describeEventsForOrganizationPagesArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationPagesCalls(stub func(*health.DescribeEventsForOrganizationInput, func(*health.DescribeEventsForOrganizationOutput, bool) bool) error) {
	fake.describeEventsForOrganizationPagesMutex.Lock()
	defer fake.describeEventsForOrganizationPagesMutex.Unlock()
	fake.DescribeEventsForOrganizationPagesStub = stub
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationPagesArgsForCall(i int) (*health.DescribeEventsForOrganizationInput, func(*health.DescribeEventsForOrganizationOutput, bool) bool) {
	fake.describeEventsForOrganizationPagesMutex.RLock()
	defer fake.describeEventsForOrganizationPagesMutex.RUnlock()
	argsForCall := fake.describeEventsForOrganizationPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationPagesReturns(result1 error) {
	fake.describeEventsForOrganizationPagesMutex.Lock()
	defer fake.describeEventsForOrganizationPagesMutex.Unlock()
	fake.DescribeEventsForOrganizationPagesStub = nil
	fake.describeEventsForOrganizationPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationPagesReturnsOnCall(i int, result1 error) {
	fake.describeEventsForOrganizationPagesMutex.Lock()
	defer fake.describeEventsForOrganizationPagesMutex.Unlock()
	fake.DescribeEventsForOrganizationPagesStub = nil
	if fake.describeEventsForOrganizationPagesReturnsOnCall == nil {
		fake.describeEventsForOrganizationPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEventsForOrganizationPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationPagesWithContext(arg1 context.Context, arg2 *health.DescribeEventsForOrganizationInput, arg3 func(*health.DescribeEventsForOrganizationOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeEventsForOrganizationPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventsForOrganizationPagesWithContextReturnsOnCall[len(fake.describeEventsForOrganizationPagesWithContextArgsForCall)]
	fake.describeEventsForOrganizationPagesWithContextArgsForCall = append(fake.describeEventsForOrganizationPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeEventsForOrganizationInput
		arg3 func(*health.DescribeEventsForOrganizationOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeEventsForOrganizationPagesWithContextStub
	fakeReturns := fake.describeEventsForOrganizationPagesWithContextReturns
	fake.recordInvocation("DescribeEventsForOrganizationPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeEventsForOrganizationPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationPagesWithContextCallCount() int {
	fake.describeEventsForOrganizationPagesWithContextMutex.RLock()
	defer fake.describeEventsForOrganizationPagesWithContextMutex.RUnlock()
	return len(fake.describeEventsForOrganizationPagesWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationPagesWithContextCalls(stub func(context.Context, *health.DescribeEventsForOrganizationInput, func(*health.DescribeEventsForOrganizationOutput, bool) bool, ...request.Option) error) {
	fake.describeEventsForOrganizationPagesWithContextMutex.Lock()
	defer fake.describeEventsForOrganizationPagesWithContextMutex.Unlock()
	fake.DescribeEventsForOrganizationPagesWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationPagesWithContextArgsForCall(i int) (context.Context, *health.DescribeEventsForOrganizationInput, func(*health.DescribeEventsForOrganizationOutput, bool) bool, []request.Option) {
	fake.describeEventsForOrganizationPagesWithContextMutex.RLock()
	defer fake.describeEventsForOrganizationPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeEventsForOrganizationPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationPagesWithContextReturns(result1 error) {
	fake.describeEventsForOrganizationPagesWithContextMutex.Lock()
	defer fake.describeEventsForOrganizationPagesWithContextMutex.Unlock()
	fake.DescribeEventsForOrganizationPagesWithContextStub = nil
	fake.describeEventsForOrganizationPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeEventsForOrganizationPagesWithContextMutex.Lock()
	defer fake.describeEventsForOrganizationPagesWithContextMutex.Unlock()
	fake.DescribeEventsForOrganizationPagesWithContextStub = nil
	if fake.describeEventsForOrganizationPagesWithContextReturnsOnCall == nil {
		fake.describeEventsForOrganizationPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEventsForOrganizationPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationRequest(arg1 *health.DescribeEventsForOrganizationInput) (*request.Request, *health.DescribeEventsForOrganizationOutput) {
	fake.describeEventsForOrganizationRequestMutex.Lock()
	ret, specificReturn := fake.describeEventsForOrganizationRequestReturnsOnCall[len(fake.describeEventsForOrganizationRequestArgsForCall)]
	fake.describeEventsForOrganizationRequestArgsForCall = append(fake.describeEventsForOrganizationRequestArgsForCall, struct {
		arg1 *health.DescribeEventsForOrganizationInput
	}{arg1})
	stub := fake.DescribeEventsForOrganizationRequestStub
	fakeReturns := fake.describeEventsForOrganizationRequestReturns
	fake.recordInvocation("DescribeEventsForOrganizationRequest", []interface{}{arg1})
	fake.describeEventsForOrganizationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationRequestCallCount() int {
	fake.describeEventsForOrganizationRequestMutex.RLock()
	defer fake.describeEventsForOrganizationRequestMutex.RUnlock()
	return len(fake.describeEventsForOrganizationRequestArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationRequestCalls(stub func(*health.DescribeEventsForOrganizationInput) (*request.Request, *health.DescribeEventsForOrganizationOutput)) {
	fake.describeEventsForOrganizationRequestMutex.Lock()
	defer fake.describeEventsForOrganizationRequestMutex.Unlock()
	fake.DescribeEventsForOrganizationRequestStub = stub
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationRequestArgsForCall(i int) *health.DescribeEventsForOrganizationInput {
	fake.describeEventsForOrganizationRequestMutex.RLock()
	defer fake.describeEventsForOrganizationRequestMutex.RUnlock()
	argsForCall := fake.describeEventsForOrganizationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationRequestReturns(result1 *request.Request, result2 *health.DescribeEventsForOrganizationOutput) {
	fake.describeEventsForOrganizationRequestMutex.Lock()
	defer fake.describeEventsForOrganizationRequestMutex.Unlock()
	fake.DescribeEventsForOrganizationRequestStub = nil
	fake.describeEventsForOrganizationRequestReturns = struct {
		result1 *request.Request
		result2 *health.DescribeEventsForOrganizationOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationRequestReturnsOnCall(i int, result1 *request.Request, result2 *health.DescribeEventsForOrganizationOutput) {
	fake.describeEventsForOrganizationRequestMutex.Lock()
	defer fake.describeEventsForOrganizationRequestMutex.Unlock()
	fake.DescribeEventsForOrganizationRequestStub = nil
	if fake.describeEventsForOrganizationRequestReturnsOnCall == nil {
		fake.describeEventsForOrganizationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *health.DescribeEventsForOrganizationOutput
		})
	}
	fake.describeEventsForOrganizationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *health.DescribeEventsForOrganizationOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationWithContext(arg1 context.Context, arg2 *health.DescribeEventsForOrganizationInput, arg3 ...request.Option) (*health.DescribeEventsForOrganizationOutput, error) {
	fake.describeEventsForOrganizationWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventsForOrganizationWithContextReturnsOnCall[len(fake.describeEventsForOrganizationWithContextArgsForCall)]
	fake.describeEventsForOrganizationWithContextArgsForCall = append(fake.describeEventsForOrganizationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeEventsForOrganizationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEventsForOrganizationWithContextStub
	fakeReturns := fake.describeEventsForOrganizationWithContextReturns
	fake.recordInvocation("DescribeEventsForOrganizationWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEventsForOrganizationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationWithContextCallCount() int {
	fake.describeEventsForOrganizationWithContextMutex.RLock()
	defer fake.describeEventsForOrganizationWithContextMutex.RUnlock()
	return len(fake.describeEventsForOrganizationWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationWithContextCalls(stub func(context.Context, *health.DescribeEventsForOrganizationInput, ...request.Option) (*health.DescribeEventsForOrganizationOutput, error)) {
	fake.describeEventsForOrganizationWithContextMutex.Lock()
	defer fake.describeEventsForOrganizationWithContextMutex.Unlock()
	fake.DescribeEventsForOrganizationWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationWithContextArgsForCall(i int) (context.Context, *health.DescribeEventsForOrganizationInput, []request.Option) {
	fake.describeEventsForOrganizationWithContextMutex.RLock()
	defer fake.describeEventsForOrganizationWithContextMutex.RUnlock()
	argsForCall := fake.describeEventsForOrganizationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationWithContextReturns(result1 *health.DescribeEventsForOrganizationOutput, result2 error) {
	fake.describeEventsForOrganizationWithContextMutex.Lock()
	defer fake.describeEventsForOrganizationWithContextMutex.Unlock()
	fake.DescribeEventsForOrganizationWithContextStub = nil
	fake.describeEventsForOrganizationWithContextReturns = struct {
		result1 *health.DescribeEventsForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventsForOrganizationWithContextReturnsOnCall(i int, result1 *health.DescribeEventsForOrganizationOutput, result2 error) {
	fake.describeEventsForOrganizationWithContextMutex.Lock()
	defer fake.describeEventsForOrganizationWithContextMutex.Unlock()
	fake.DescribeEventsForOrganizationWithContextStub = nil
	if fake.describeEventsForOrganizationWithContextReturnsOnCall == nil {
		fake.describeEventsForOrganizationWithContextReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeEventsForOrganizationOutput
			result2 error
		})
	}
	fake.describeEventsForOrganizationWithContextReturnsOnCall[i] = struct {
		result1 *health.DescribeEventsForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventsPages(arg1 *health.DescribeEventsInput, arg2 func(*health.DescribeEventsOutput, bool) bool) error {
	fake.describeEventsPagesMutex.Lock()
	ret, specificReturn := fake.describeEventsPagesReturnsOnCall[len(fake.describeEventsPagesArgsForCall)]
	fake.describeEventsPagesArgsForCall = append(fake.describeEventsPagesArgsForCall, struct {
		arg1 *health.DescribeEventsInput
		arg2 func(*health.DescribeEventsOutput, bool) bool
	}{arg1, arg2})
	stub := fake.DescribeEventsPagesStub
	fakeReturns := fake.describeEventsPagesReturns
	fake.recordInvocation("DescribeEventsPages", []interface{}{arg1, arg2})
	fake.describeEventsPagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthAPI) DescribeEventsPagesCallCount() int {
	fake.describeEventsPagesMutex.RLock()
	defer fake.describeEventsPagesMutex.RUnlock()
	return len(fake.describeEventsPagesArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventsPagesCalls(stub func(*health.DescribeEventsInput, func(*health.DescribeEventsOutput, bool) bool) error) {
	fake.describeEventsPagesMutex.Lock()
	defer fake.describeEventsPagesMutex.Unlock()
	fake.DescribeEventsPagesStub = stub
}

func (fake *FakeHealthAPI) DescribeEventsPagesArgsForCall(i int) (*health.DescribeEventsInput, func(*health.DescribeEventsOutput, bool) bool) {
	fake.describeEventsPagesMutex.RLock()
	defer fake.describeEventsPagesMutex.RUnlock()
	argsForCall := fake.describeEventsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHealthAPI) DescribeEventsPagesReturns(result1 error) {
	fake.describeEventsPagesMutex.Lock()
	defer fake.describeEventsPagesMutex.Unlock()
	fake.DescribeEventsPagesStub = nil
	fake.describeEventsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeEventsPagesReturnsOnCall(i int, result1 error) {
	fake.describeEventsPagesMutex.Lock()
	defer fake.describeEventsPagesMutex.Unlock()
	fake.DescribeEventsPagesStub = nil
	if fake.describeEventsPagesReturnsOnCall == nil {
		fake.describeEventsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEventsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeEventsPagesWithContext(arg1 context.Context, arg2 *health.DescribeEventsInput, arg3 func(*health.DescribeEventsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeEventsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventsPagesWithContextReturnsOnCall[len(fake.describeEventsPagesWithContextArgsForCall)]
	fake.describeEventsPagesWithContextArgsForCall = append(fake.describeEventsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeEventsInput
		arg3 func(*health.DescribeEventsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	stub := fake.DescribeEventsPagesWithContextStub
	fakeReturns := fake.describeEventsPagesWithContextReturns
	fake.recordInvocation("DescribeEventsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeEventsPagesWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthAPI) DescribeEventsPagesWithContextCallCount() int {
	fake.describeEventsPagesWithContextMutex.RLock()
	defer fake.describeEventsPagesWithContextMutex.RUnlock()
	return len(fake.describeEventsPagesWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventsPagesWithContextCalls(stub func(context.Context, *health.DescribeEventsInput, func(*health.DescribeEventsOutput, bool) bool, ...request.Option) error) {
	fake.describeEventsPagesWithContextMutex.Lock()
	defer fake.describeEventsPagesWithContextMutex.Unlock()
	fake.DescribeEventsPagesWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeEventsPagesWithContextArgsForCall(i int) (context.Context, *health.DescribeEventsInput, func(*health.DescribeEventsOutput, bool) bool, []request.Option) {
	fake.describeEventsPagesWithContextMutex.RLock()
	defer fake.describeEventsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeEventsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeHealthAPI) DescribeEventsPagesWithContextReturns(result1 error) {
	fake.describeEventsPagesWithContextMutex.Lock()
	defer fake.describeEventsPagesWithContextMutex.Unlock()
	fake.DescribeEventsPagesWithContextStub = nil
	fake.describeEventsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeEventsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeEventsPagesWithContextMutex.Lock()
	defer fake.describeEventsPagesWithContextMutex.Unlock()
	fake.DescribeEventsPagesWithContextStub = nil
	if fake.describeEventsPagesWithContextReturnsOnCall == nil {
		fake.describeEventsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEventsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHealthAPI) DescribeEventsRequest(arg1 *health.DescribeEventsInput) (*request.Request, *health.DescribeEventsOutput) {
	fake.describeEventsRequestMutex.Lock()
	ret, specificReturn := fake.describeEventsRequestReturnsOnCall[len(fake.describeEventsRequestArgsForCall)]
	fake.describeEventsRequestArgsForCall = append(fake.describeEventsRequestArgsForCall, struct {
		arg1 *health.DescribeEventsInput
	}{arg1})
	stub := fake.DescribeEventsRequestStub
	fakeReturns := fake.describeEventsRequestReturns
	fake.recordInvocation("DescribeEventsRequest", []interface{}{arg1})
	fake.describeEventsRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventsRequestCallCount() int {
	fake.describeEventsRequestMutex.RLock()
	defer fake.describeEventsRequestMutex.RUnlock()
	return len(fake.describeEventsRequestArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventsRequestCalls(stub func(*health.DescribeEventsInput) (*request.Request, *health.DescribeEventsOutput)) {
	fake.describeEventsRequestMutex.Lock()
	defer fake.describeEventsRequestMutex.Unlock()
	fake.DescribeEventsRequestStub = stub
}

func (fake *FakeHealthAPI) DescribeEventsRequestArgsForCall(i int) *health.DescribeEventsInput {
	fake.describeEventsRequestMutex.RLock()
	defer fake.describeEventsRequestMutex.RUnlock()
	argsForCall := fake.describeEventsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeEventsRequestReturns(result1 *request.Request, result2 *health.DescribeEventsOutput) {
	fake.describeEventsRequestMutex.Lock()
	defer fake.describeEventsRequestMutex.Unlock()
	fake.DescribeEventsRequestStub = nil
	fake.describeEventsRequestReturns = struct {
		result1 *request.Request
		result2 *health.DescribeEventsOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventsRequestReturnsOnCall(i int, result1 *request.Request, result2 *health.DescribeEventsOutput) {
	fake.describeEventsRequestMutex.Lock()
	defer fake.describeEventsRequestMutex.Unlock()
	fake.DescribeEventsRequestStub = nil
	if fake.describeEventsRequestReturnsOnCall == nil {
		fake.describeEventsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *health.DescribeEventsOutput
		})
	}
	fake.describeEventsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *health.DescribeEventsOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventsWithContext(arg1 context.Context, arg2 *health.DescribeEventsInput, arg3 ...request.Option) (*health.DescribeEventsOutput, error) {
	fake.describeEventsWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventsWithContextReturnsOnCall[len(fake.describeEventsWithContextArgsForCall)]
	fake.describeEventsWithContextArgsForCall = append(fake.describeEventsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeEventsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeEventsWithContextStub
	fakeReturns := fake.describeEventsWithContextReturns
	fake.recordInvocation("DescribeEventsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEventsWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeEventsWithContextCallCount() int {
	fake.describeEventsWithContextMutex.RLock()
	defer fake.describeEventsWithContextMutex.RUnlock()
	return len(fake.describeEventsWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeEventsWithContextCalls(stub func(context.Context, *health.DescribeEventsInput, ...request.Option) (*health.DescribeEventsOutput, error)) {
	fake.describeEventsWithContextMutex.Lock()
	defer fake.describeEventsWithContextMutex.Unlock()
	fake.DescribeEventsWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeEventsWithContextArgsForCall(i int) (context.Context, *health.DescribeEventsInput, []request.Option) {
	fake.describeEventsWithContextMutex.RLock()
	defer fake.describeEventsWithContextMutex.RUnlock()
	argsForCall := fake.describeEventsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHealthAPI) DescribeEventsWithContextReturns(result1 *health.DescribeEventsOutput, result2 error) {
	fake.describeEventsWithContextMutex.Lock()
	defer fake.describeEventsWithContextMutex.Unlock()
	fake.DescribeEventsWithContextStub = nil
	fake.describeEventsWithContextReturns = struct {
		result1 *health.DescribeEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeEventsWithContextReturnsOnCall(i int, result1 *health.DescribeEventsOutput, result2 error) {
	fake.describeEventsWithContextMutex.Lock()
	defer fake.describeEventsWithContextMutex.Unlock()
	fake.DescribeEventsWithContextStub = nil
	if fake.describeEventsWithContextReturnsOnCall == nil {
		fake.describeEventsWithContextReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeEventsOutput
			result2 error
		})
	}
	fake.describeEventsWithContextReturnsOnCall[i] = struct {
		result1 *health.DescribeEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganization(arg1 *health.DescribeHealthServiceStatusForOrganizationInput) (*health.DescribeHealthServiceStatusForOrganizationOutput, error) {
	fake.describeHealthServiceStatusForOrganizationMutex.Lock()
	ret, specificReturn := fake.describeHealthServiceStatusForOrganizationReturnsOnCall[len(fake.describeHealthServiceStatusForOrganizationArgsForCall)]
	fake.describeHealthServiceStatusForOrganizationArgsForCall = append(fake.describeHealthServiceStatusForOrganizationArgsForCall, struct {
		arg1 *health.DescribeHealthServiceStatusForOrganizationInput
	}{arg1})
	stub := fake.DescribeHealthServiceStatusForOrganizationStub
	fakeReturns := fake.describeHealthServiceStatusForOrganizationReturns
	fake.recordInvocation("DescribeHealthServiceStatusForOrganization", []interface{}{arg1})
	fake.describeHealthServiceStatusForOrganizationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationCallCount() int {
	fake.describeHealthServiceStatusForOrganizationMutex.RLock()
	defer fake.describeHealthServiceStatusForOrganizationMutex.RUnlock()
	return len(fake.describeHealthServiceStatusForOrganizationArgsForCall)
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationCalls(stub func(*health.DescribeHealthServiceStatusForOrganizationInput) (*health.DescribeHealthServiceStatusForOrganizationOutput, error)) {
	fake.describeHealthServiceStatusForOrganizationMutex.Lock()
	defer fake.describeHealthServiceStatusForOrganizationMutex.Unlock()
	fake.DescribeHealthServiceStatusForOrganizationStub = stub
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationArgsForCall(i int) *health.DescribeHealthServiceStatusForOrganizationInput {
	fake.describeHealthServiceStatusForOrganizationMutex.RLock()
	defer fake.describeHealthServiceStatusForOrganizationMutex.RUnlock()
	argsForCall := fake.describeHealthServiceStatusForOrganizationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationReturns(result1 *health.DescribeHealthServiceStatusForOrganizationOutput, result2 error) {
	fake.describeHealthServiceStatusForOrganizationMutex.Lock()
	defer fake.describeHealthServiceStatusForOrganizationMutex.Unlock()
	fake.DescribeHealthServiceStatusForOrganizationStub = nil
	fake.describeHealthServiceStatusForOrganizationReturns = struct {
		result1 *health.DescribeHealthServiceStatusForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationReturnsOnCall(i int, result1 *health.DescribeHealthServiceStatusForOrganizationOutput, result2 error) {
	fake.describeHealthServiceStatusForOrganizationMutex.Lock()
	defer fake.describeHealthServiceStatusForOrganizationMutex.Unlock()
	fake.DescribeHealthServiceStatusForOrganizationStub = nil
	if fake.describeHealthServiceStatusForOrganizationReturnsOnCall == nil {
		fake.describeHealthServiceStatusForOrganizationReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeHealthServiceStatusForOrganizationOutput
			result2 error
		})
	}
	fake.describeHealthServiceStatusForOrganizationReturnsOnCall[i] = struct {
		result1 *health.DescribeHealthServiceStatusForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationRequest(arg1 *health.DescribeHealthServiceStatusForOrganizationInput) (*request.Request, *health.DescribeHealthServiceStatusForOrganizationOutput) {
	fake.describeHealthServiceStatusForOrganizationRequestMutex.Lock()
	ret, specificReturn := fake.describeHealthServiceStatusForOrganizationRequestReturnsOnCall[len(fake.describeHealthServiceStatusForOrganizationRequestArgsForCall)]
	fake.describeHealthServiceStatusForOrganizationRequestArgsForCall = append(fake.describeHealthServiceStatusForOrganizationRequestArgsForCall, struct {
		arg1 *health.DescribeHealthServiceStatusForOrganizationInput
	}{arg1})
	stub := fake.DescribeHealthServiceStatusForOrganizationRequestStub
	fakeReturns := fake.describeHealthServiceStatusForOrganizationRequestReturns
	fake.recordInvocation("DescribeHealthServiceStatusForOrganizationRequest", []interface{}{arg1})
	fake.describeHealthServiceStatusForOrganizationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationRequestCallCount() int {
	fake.describeHealthServiceStatusForOrganizationRequestMutex.RLock()
	defer fake.describeHealthServiceStatusForOrganizationRequestMutex.RUnlock()
	return len(fake.describeHealthServiceStatusForOrganizationRequestArgsForCall)
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationRequestCalls(stub func(*health.DescribeHealthServiceStatusForOrganizationInput) (*request.Request, *health.DescribeHealthServiceStatusForOrganizationOutput)) {
	fake.describeHealthServiceStatusForOrganizationRequestMutex.Lock()
	defer fake.describeHealthServiceStatusForOrganizationRequestMutex.Unlock()
	fake.DescribeHealthServiceStatusForOrganizationRequestStub = stub
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationRequestArgsForCall(i int) *health.DescribeHealthServiceStatusForOrganizationInput {
	fake.describeHealthServiceStatusForOrganizationRequestMutex.RLock()
	defer fake.describeHealthServiceStatusForOrganizationRequestMutex.RUnlock()
	argsForCall := fake.describeHealthServiceStatusForOrganizationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationRequestReturns(result1 *request.Request, result2 *health.DescribeHealthServiceStatusForOrganizationOutput) {
	fake.describeHealthServiceStatusForOrganizationRequestMutex.Lock()
	defer fake.describeHealthServiceStatusForOrganizationRequestMutex.Unlock()
	fake.DescribeHealthServiceStatusForOrganizationRequestStub = nil
	fake.describeHealthServiceStatusForOrganizationRequestReturns = struct {
		result1 *request.Request
		result2 *health.DescribeHealthServiceStatusForOrganizationOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationRequestReturnsOnCall(i int, result1 *request.Request, result2 *health.DescribeHealthServiceStatusForOrganizationOutput) {
	fake.describeHealthServiceStatusForOrganizationRequestMutex.Lock()
	defer fake.describeHealthServiceStatusForOrganizationRequestMutex.Unlock()
	fake.DescribeHealthServiceStatusForOrganizationRequestStub = nil
	if fake.describeHealthServiceStatusForOrganizationRequestReturnsOnCall == nil {
		fake.describeHealthServiceStatusForOrganizationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *health.DescribeHealthServiceStatusForOrganizationOutput
		})
	}
	fake.describeHealthServiceStatusForOrganizationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *health.DescribeHealthServiceStatusForOrganizationOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationWithContext(arg1 context.Context, arg2 *health.DescribeHealthServiceStatusForOrganizationInput, arg3 ...request.Option) (*health.DescribeHealthServiceStatusForOrganizationOutput, error) {
	fake.describeHealthServiceStatusForOrganizationWithContextMutex.Lock()
	ret, specificReturn := fake.describeHealthServiceStatusForOrganizationWithContextReturnsOnCall[len(fake.describeHealthServiceStatusForOrganizationWithContextArgsForCall)]
	fake.describeHealthServiceStatusForOrganizationWithContextArgsForCall = append(fake.describeHealthServiceStatusForOrganizationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DescribeHealthServiceStatusForOrganizationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DescribeHealthServiceStatusForOrganizationWithContextStub
	fakeReturns := fake.describeHealthServiceStatusForOrganizationWithContextReturns
	fake.recordInvocation("DescribeHealthServiceStatusForOrganizationWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeHealthServiceStatusForOrganizationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationWithContextCallCount() int {
	fake.describeHealthServiceStatusForOrganizationWithContextMutex.RLock()
	defer fake.describeHealthServiceStatusForOrganizationWithContextMutex.RUnlock()
	return len(fake.describeHealthServiceStatusForOrganizationWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationWithContextCalls(stub func(context.Context, *health.DescribeHealthServiceStatusForOrganizationInput, ...request.Option) (*health.DescribeHealthServiceStatusForOrganizationOutput, error)) {
	fake.describeHealthServiceStatusForOrganizationWithContextMutex.Lock()
	defer fake.describeHealthServiceStatusForOrganizationWithContextMutex.Unlock()
	fake.DescribeHealthServiceStatusForOrganizationWithContextStub = stub
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationWithContextArgsForCall(i int) (context.Context, *health.DescribeHealthServiceStatusForOrganizationInput, []request.Option) {
	fake.describeHealthServiceStatusForOrganizationWithContextMutex.RLock()
	defer fake.describeHealthServiceStatusForOrganizationWithContextMutex.RUnlock()
	argsForCall := fake.describeHealthServiceStatusForOrganizationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationWithContextReturns(result1 *health.DescribeHealthServiceStatusForOrganizationOutput, result2 error) {
	fake.describeHealthServiceStatusForOrganizationWithContextMutex.Lock()
	defer fake.describeHealthServiceStatusForOrganizationWithContextMutex.Unlock()
	fake.DescribeHealthServiceStatusForOrganizationWithContextStub = nil
	fake.describeHealthServiceStatusForOrganizationWithContextReturns = struct {
		result1 *health.DescribeHealthServiceStatusForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DescribeHealthServiceStatusForOrganizationWithContextReturnsOnCall(i int, result1 *health.DescribeHealthServiceStatusForOrganizationOutput, result2 error) {
	fake.describeHealthServiceStatusForOrganizationWithContextMutex.Lock()
	defer fake.describeHealthServiceStatusForOrganizationWithContextMutex.Unlock()
	fake.DescribeHealthServiceStatusForOrganizationWithContextStub = nil
	if fake.describeHealthServiceStatusForOrganizationWithContextReturnsOnCall == nil {
		fake.describeHealthServiceStatusForOrganizationWithContextReturnsOnCall = make(map[int]struct {
			result1 *health.DescribeHealthServiceStatusForOrganizationOutput
			result2 error
		})
	}
	fake.describeHealthServiceStatusForOrganizationWithContextReturnsOnCall[i] = struct {
		result1 *health.DescribeHealthServiceStatusForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganization(arg1 *health.DisableHealthServiceAccessForOrganizationInput) (*health.DisableHealthServiceAccessForOrganizationOutput, error) {
	fake.disableHealthServiceAccessForOrganizationMutex.Lock()
	ret, specificReturn := fake.disableHealthServiceAccessForOrganizationReturnsOnCall[len(fake.disableHealthServiceAccessForOrganizationArgsForCall)]
	fake.disableHealthServiceAccessForOrganizationArgsForCall = append(fake.disableHealthServiceAccessForOrganizationArgsForCall, struct {
		arg1 *health.DisableHealthServiceAccessForOrganizationInput
	}{arg1})
	stub := fake.DisableHealthServiceAccessForOrganizationStub
	fakeReturns := fake.disableHealthServiceAccessForOrganizationReturns
	fake.recordInvocation("DisableHealthServiceAccessForOrganization", []interface{}{arg1})
	fake.disableHealthServiceAccessForOrganizationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationCallCount() int {
	fake.disableHealthServiceAccessForOrganizationMutex.RLock()
	defer fake.disableHealthServiceAccessForOrganizationMutex.RUnlock()
	return len(fake.disableHealthServiceAccessForOrganizationArgsForCall)
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationCalls(stub func(*health.DisableHealthServiceAccessForOrganizationInput) (*health.DisableHealthServiceAccessForOrganizationOutput, error)) {
	fake.disableHealthServiceAccessForOrganizationMutex.Lock()
	defer fake.disableHealthServiceAccessForOrganizationMutex.Unlock()
	fake.DisableHealthServiceAccessForOrganizationStub = stub
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationArgsForCall(i int) *health.DisableHealthServiceAccessForOrganizationInput {
	fake.disableHealthServiceAccessForOrganizationMutex.RLock()
	defer fake.disableHealthServiceAccessForOrganizationMutex.RUnlock()
	argsForCall := fake.disableHealthServiceAccessForOrganizationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationReturns(result1 *health.DisableHealthServiceAccessForOrganizationOutput, result2 error) {
	fake.disableHealthServiceAccessForOrganizationMutex.Lock()
	defer fake.disableHealthServiceAccessForOrganizationMutex.Unlock()
	fake.DisableHealthServiceAccessForOrganizationStub = nil
	fake.disableHealthServiceAccessForOrganizationReturns = struct {
		result1 *health.DisableHealthServiceAccessForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationReturnsOnCall(i int, result1 *health.DisableHealthServiceAccessForOrganizationOutput, result2 error) {
	fake.disableHealthServiceAccessForOrganizationMutex.Lock()
	defer fake.disableHealthServiceAccessForOrganizationMutex.Unlock()
	fake.DisableHealthServiceAccessForOrganizationStub = nil
	if fake.disableHealthServiceAccessForOrganizationReturnsOnCall == nil {
		fake.disableHealthServiceAccessForOrganizationReturnsOnCall = make(map[int]struct {
			result1 *health.DisableHealthServiceAccessForOrganizationOutput
			result2 error
		})
	}
	fake.disableHealthServiceAccessForOrganizationReturnsOnCall[i] = struct {
		result1 *health.DisableHealthServiceAccessForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationRequest(arg1 *health.DisableHealthServiceAccessForOrganizationInput) (*request.Request, *health.DisableHealthServiceAccessForOrganizationOutput) {
	fake.disableHealthServiceAccessForOrganizationRequestMutex.Lock()
	ret, specificReturn := fake.disableHealthServiceAccessForOrganizationRequestReturnsOnCall[len(fake.disableHealthServiceAccessForOrganizationRequestArgsForCall)]
	fake.disableHealthServiceAccessForOrganizationRequestArgsForCall = append(fake.disableHealthServiceAccessForOrganizationRequestArgsForCall, struct {
		arg1 *health.DisableHealthServiceAccessForOrganizationInput
	}{arg1})
	stub := fake.DisableHealthServiceAccessForOrganizationRequestStub
	fakeReturns := fake.disableHealthServiceAccessForOrganizationRequestReturns
	fake.recordInvocation("DisableHealthServiceAccessForOrganizationRequest", []interface{}{arg1})
	fake.disableHealthServiceAccessForOrganizationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationRequestCallCount() int {
	fake.disableHealthServiceAccessForOrganizationRequestMutex.RLock()
	defer fake.disableHealthServiceAccessForOrganizationRequestMutex.RUnlock()
	return len(fake.disableHealthServiceAccessForOrganizationRequestArgsForCall)
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationRequestCalls(stub func(*health.DisableHealthServiceAccessForOrganizationInput) (*request.Request, *health.DisableHealthServiceAccessForOrganizationOutput)) {
	fake.disableHealthServiceAccessForOrganizationRequestMutex.Lock()
	defer fake.disableHealthServiceAccessForOrganizationRequestMutex.Unlock()
	fake.DisableHealthServiceAccessForOrganizationRequestStub = stub
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationRequestArgsForCall(i int) *health.DisableHealthServiceAccessForOrganizationInput {
	fake.disableHealthServiceAccessForOrganizationRequestMutex.RLock()
	defer fake.disableHealthServiceAccessForOrganizationRequestMutex.RUnlock()
	argsForCall := fake.disableHealthServiceAccessForOrganizationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationRequestReturns(result1 *request.Request, result2 *health.DisableHealthServiceAccessForOrganizationOutput) {
	fake.disableHealthServiceAccessForOrganizationRequestMutex.Lock()
	defer fake.disableHealthServiceAccessForOrganizationRequestMutex.Unlock()
	fake.DisableHealthServiceAccessForOrganizationRequestStub = nil
	fake.disableHealthServiceAccessForOrganizationRequestReturns = struct {
		result1 *request.Request
		result2 *health.DisableHealthServiceAccessForOrganizationOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationRequestReturnsOnCall(i int, result1 *request.Request, result2 *health.DisableHealthServiceAccessForOrganizationOutput) {
	fake.disableHealthServiceAccessForOrganizationRequestMutex.Lock()
	defer fake.disableHealthServiceAccessForOrganizationRequestMutex.Unlock()
	fake.DisableHealthServiceAccessForOrganizationRequestStub = nil
	if fake.disableHealthServiceAccessForOrganizationRequestReturnsOnCall == nil {
		fake.disableHealthServiceAccessForOrganizationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *health.DisableHealthServiceAccessForOrganizationOutput
		})
	}
	fake.disableHealthServiceAccessForOrganizationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *health.DisableHealthServiceAccessForOrganizationOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationWithContext(arg1 context.Context, arg2 *health.DisableHealthServiceAccessForOrganizationInput, arg3 ...request.Option) (*health.DisableHealthServiceAccessForOrganizationOutput, error) {
	fake.disableHealthServiceAccessForOrganizationWithContextMutex.Lock()
	ret, specificReturn := fake.disableHealthServiceAccessForOrganizationWithContextReturnsOnCall[len(fake.disableHealthServiceAccessForOrganizationWithContextArgsForCall)]
	fake.disableHealthServiceAccessForOrganizationWithContextArgsForCall = append(fake.disableHealthServiceAccessForOrganizationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.DisableHealthServiceAccessForOrganizationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.DisableHealthServiceAccessForOrganizationWithContextStub
	fakeReturns := fake.disableHealthServiceAccessForOrganizationWithContextReturns
	fake.recordInvocation("DisableHealthServiceAccessForOrganizationWithContext", []interface{}{arg1, arg2, arg3})
	fake.disableHealthServiceAccessForOrganizationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationWithContextCallCount() int {
	fake.disableHealthServiceAccessForOrganizationWithContextMutex.RLock()
	defer fake.disableHealthServiceAccessForOrganizationWithContextMutex.RUnlock()
	return len(fake.disableHealthServiceAccessForOrganizationWithContextArgsForCall)
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationWithContextCalls(stub func(context.Context, *health.DisableHealthServiceAccessForOrganizationInput, ...request.Option) (*health.DisableHealthServiceAccessForOrganizationOutput, error)) {
	fake.disableHealthServiceAccessForOrganizationWithContextMutex.Lock()
	defer fake.disableHealthServiceAccessForOrganizationWithContextMutex.Unlock()
	fake.DisableHealthServiceAccessForOrganizationWithContextStub = stub
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationWithContextArgsForCall(i int) (context.Context, *health.DisableHealthServiceAccessForOrganizationInput, []request.Option) {
	fake.disableHealthServiceAccessForOrganizationWithContextMutex.RLock()
	defer fake.disableHealthServiceAccessForOrganizationWithContextMutex.RUnlock()
	argsForCall := fake.disableHealthServiceAccessForOrganizationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationWithContextReturns(result1 *health.DisableHealthServiceAccessForOrganizationOutput, result2 error) {
	fake.disableHealthServiceAccessForOrganizationWithContextMutex.Lock()
	defer fake.disableHealthServiceAccessForOrganizationWithContextMutex.Unlock()
	fake.DisableHealthServiceAccessForOrganizationWithContextStub = nil
	fake.disableHealthServiceAccessForOrganizationWithContextReturns = struct {
		result1 *health.DisableHealthServiceAccessForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) DisableHealthServiceAccessForOrganizationWithContextReturnsOnCall(i int, result1 *health.DisableHealthServiceAccessForOrganizationOutput, result2 error) {
	fake.disableHealthServiceAccessForOrganizationWithContextMutex.Lock()
	defer fake.disableHealthServiceAccessForOrganizationWithContextMutex.Unlock()
	fake.DisableHealthServiceAccessForOrganizationWithContextStub = nil
	if fake.disableHealthServiceAccessForOrganizationWithContextReturnsOnCall == nil {
		fake.disableHealthServiceAccessForOrganizationWithContextReturnsOnCall = make(map[int]struct {
			result1 *health.DisableHealthServiceAccessForOrganizationOutput
			result2 error
		})
	}
	fake.disableHealthServiceAccessForOrganizationWithContextReturnsOnCall[i] = struct {
		result1 *health.DisableHealthServiceAccessForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganization(arg1 *health.EnableHealthServiceAccessForOrganizationInput) (*health.EnableHealthServiceAccessForOrganizationOutput, error) {
	fake.enableHealthServiceAccessForOrganizationMutex.Lock()
	ret, specificReturn := fake.enableHealthServiceAccessForOrganizationReturnsOnCall[len(fake.enableHealthServiceAccessForOrganizationArgsForCall)]
	fake.enableHealthServiceAccessForOrganizationArgsForCall = append(fake.enableHealthServiceAccessForOrganizationArgsForCall, struct {
		arg1 *health.EnableHealthServiceAccessForOrganizationInput
	}{arg1})
	stub := fake.EnableHealthServiceAccessForOrganizationStub
	fakeReturns := fake.enableHealthServiceAccessForOrganizationReturns
	fake.recordInvocation("EnableHealthServiceAccessForOrganization", []interface{}{arg1})
	fake.enableHealthServiceAccessForOrganizationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationCallCount() int {
	fake.enableHealthServiceAccessForOrganizationMutex.RLock()
	defer fake.enableHealthServiceAccessForOrganizationMutex.RUnlock()
	return len(fake.enableHealthServiceAccessForOrganizationArgsForCall)
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationCalls(stub func(*health.EnableHealthServiceAccessForOrganizationInput) (*health.EnableHealthServiceAccessForOrganizationOutput, error)) {
	fake.enableHealthServiceAccessForOrganizationMutex.Lock()
	defer fake.enableHealthServiceAccessForOrganizationMutex.Unlock()
	fake.EnableHealthServiceAccessForOrganizationStub = stub
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationArgsForCall(i int) *health.EnableHealthServiceAccessForOrganizationInput {
	fake.enableHealthServiceAccessForOrganizationMutex.RLock()
	defer fake.enableHealthServiceAccessForOrganizationMutex.RUnlock()
	argsForCall := fake.enableHealthServiceAccessForOrganizationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationReturns(result1 *health.EnableHealthServiceAccessForOrganizationOutput, result2 error) {
	fake.enableHealthServiceAccessForOrganizationMutex.Lock()
	defer fake.enableHealthServiceAccessForOrganizationMutex.Unlock()
	fake.EnableHealthServiceAccessForOrganizationStub = nil
	fake.enableHealthServiceAccessForOrganizationReturns = struct {
		result1 *health.EnableHealthServiceAccessForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationReturnsOnCall(i int, result1 *health.EnableHealthServiceAccessForOrganizationOutput, result2 error) {
	fake.enableHealthServiceAccessForOrganizationMutex.Lock()
	defer fake.enableHealthServiceAccessForOrganizationMutex.Unlock()
	fake.EnableHealthServiceAccessForOrganizationStub = nil
	if fake.enableHealthServiceAccessForOrganizationReturnsOnCall == nil {
		fake.enableHealthServiceAccessForOrganizationReturnsOnCall = make(map[int]struct {
			result1 *health.EnableHealthServiceAccessForOrganizationOutput
			result2 error
		})
	}
	fake.enableHealthServiceAccessForOrganizationReturnsOnCall[i] = struct {
		result1 *health.EnableHealthServiceAccessForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationRequest(arg1 *health.EnableHealthServiceAccessForOrganizationInput) (*request.Request, *health.EnableHealthServiceAccessForOrganizationOutput) {
	fake.enableHealthServiceAccessForOrganizationRequestMutex.Lock()
	ret, specificReturn := fake.enableHealthServiceAccessForOrganizationRequestReturnsOnCall[len(fake.enableHealthServiceAccessForOrganizationRequestArgsForCall)]
	fake.enableHealthServiceAccessForOrganizationRequestArgsForCall = append(fake.enableHealthServiceAccessForOrganizationRequestArgsForCall, struct {
		arg1 *health.EnableHealthServiceAccessForOrganizationInput
	}{arg1})
	stub := fake.EnableHealthServiceAccessForOrganizationRequestStub
	fakeReturns := fake.enableHealthServiceAccessForOrganizationRequestReturns
	fake.recordInvocation("EnableHealthServiceAccessForOrganizationRequest", []interface{}{arg1})
	fake.enableHealthServiceAccessForOrganizationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationRequestCallCount() int {
	fake.enableHealthServiceAccessForOrganizationRequestMutex.RLock()
	defer fake.enableHealthServiceAccessForOrganizationRequestMutex.RUnlock()
	return len(fake.enableHealthServiceAccessForOrganizationRequestArgsForCall)
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationRequestCalls(stub func(*health.EnableHealthServiceAccessForOrganizationInput) (*request.Request, *health.EnableHealthServiceAccessForOrganizationOutput)) {
	fake.enableHealthServiceAccessForOrganizationRequestMutex.Lock()
	defer fake.enableHealthServiceAccessForOrganizationRequestMutex.Unlock()
	fake.EnableHealthServiceAccessForOrganizationRequestStub = stub
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationRequestArgsForCall(i int) *health.EnableHealthServiceAccessForOrganizationInput {
	fake.enableHealthServiceAccessForOrganizationRequestMutex.RLock()
	defer fake.enableHealthServiceAccessForOrganizationRequestMutex.RUnlock()
	argsForCall := fake.enableHealthServiceAccessForOrganizationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationRequestReturns(result1 *request.Request, result2 *health.EnableHealthServiceAccessForOrganizationOutput) {
	fake.enableHealthServiceAccessForOrganizationRequestMutex.Lock()
	defer fake.enableHealthServiceAccessForOrganizationRequestMutex.Unlock()
	fake.EnableHealthServiceAccessForOrganizationRequestStub = nil
	fake.enableHealthServiceAccessForOrganizationRequestReturns = struct {
		result1 *request.Request
		result2 *health.EnableHealthServiceAccessForOrganizationOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationRequestReturnsOnCall(i int, result1 *request.Request, result2 *health.EnableHealthServiceAccessForOrganizationOutput) {
	fake.enableHealthServiceAccessForOrganizationRequestMutex.Lock()
	defer fake.enableHealthServiceAccessForOrganizationRequestMutex.Unlock()
	fake.EnableHealthServiceAccessForOrganizationRequestStub = nil
	if fake.enableHealthServiceAccessForOrganizationRequestReturnsOnCall == nil {
		fake.enableHealthServiceAccessForOrganizationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *health.EnableHealthServiceAccessForOrganizationOutput
		})
	}
	fake.enableHealthServiceAccessForOrganizationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *health.EnableHealthServiceAccessForOrganizationOutput
	}{result1, result2}
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationWithContext(arg1 context.Context, arg2 *health.EnableHealthServiceAccessForOrganizationInput, arg3 ...request.Option) (*health.EnableHealthServiceAccessForOrganizationOutput, error) {
	fake.enableHealthServiceAccessForOrganizationWithContextMutex.Lock()
	ret, specificReturn := fake.enableHealthServiceAccessForOrganizationWithContextReturnsOnCall[len(fake.enableHealthServiceAccessForOrganizationWithContextArgsForCall)]
	fake.enableHealthServiceAccessForOrganizationWithContextArgsForCall = append(fake.enableHealthServiceAccessForOrganizationWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *health.EnableHealthServiceAccessForOrganizationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	stub := fake.EnableHealthServiceAccessForOrganizationWithContextStub
	fakeReturns := fake.enableHealthServiceAccessForOrganizationWithContextReturns
	fake.recordInvocation("EnableHealthServiceAccessForOrganizationWithContext", []interface{}{arg1, arg2, arg3})
	fake.enableHealthServiceAccessForOrganizationWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationWithContextCallCount() int {
	fake.enableHealthServiceAccessForOrganizationWithContextMutex.RLock()
	defer fake.enableHealthServiceAccessForOrganizationWithContextMutex.RUnlock()
	return len(fake.enableHealthServiceAccessForOrganizationWithContextArgsForCall)
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationWithContextCalls(stub func(context.Context, *health.EnableHealthServiceAccessForOrganizationInput, ...request.Option) (*health.EnableHealthServiceAccessForOrganizationOutput, error)) {
	fake.enableHealthServiceAccessForOrganizationWithContextMutex.Lock()
	defer fake.enableHealthServiceAccessForOrganizationWithContextMutex.Unlock()
	fake.EnableHealthServiceAccessForOrganizationWithContextStub = stub
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationWithContextArgsForCall(i int) (context.Context, *health.EnableHealthServiceAccessForOrganizationInput, []request.Option) {
	fake.enableHealthServiceAccessForOrganizationWithContextMutex.RLock()
	defer fake.enableHealthServiceAccessForOrganizationWithContextMutex.RUnlock()
	argsForCall := fake.enableHealthServiceAccessForOrganizationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationWithContextReturns(result1 *health.EnableHealthServiceAccessForOrganizationOutput, result2 error) {
	fake.enableHealthServiceAccessForOrganizationWithContextMutex.Lock()
	defer fake.enableHealthServiceAccessForOrganizationWithContextMutex.Unlock()
	fake.EnableHealthServiceAccessForOrganizationWithContextStub = nil
	fake.enableHealthServiceAccessForOrganizationWithContextReturns = struct {
		result1 *health.EnableHealthServiceAccessForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) EnableHealthServiceAccessForOrganizationWithContextReturnsOnCall(i int, result1 *health.EnableHealthServiceAccessForOrganizationOutput, result2 error) {
	fake.enableHealthServiceAccessForOrganizationWithContextMutex.Lock()
	defer fake.enableHealthServiceAccessForOrganizationWithContextMutex.Unlock()
	fake.EnableHealthServiceAccessForOrganizationWithContextStub = nil
	if fake.enableHealthServiceAccessForOrganizationWithContextReturnsOnCall == nil {
		fake.enableHealthServiceAccessForOrganizationWithContextReturnsOnCall = make(map[int]struct {
			result1 *health.EnableHealthServiceAccessForOrganizationOutput
			result2 error
		})
	}
	fake.enableHealthServiceAccessForOrganizationWithContextReturnsOnCall[i] = struct {
		result1 *health.EnableHealthServiceAccessForOrganizationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeHealthAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.describeAffectedAccountsForOrganizationMutex.RLock()
	defer fake.describeAffectedAccountsForOrganizationMutex.RUnlock()
	fake.describeAffectedAccountsForOrganizationPagesMutex.RLock()
	defer fake.describeAffectedAccountsForOrganizationPagesMutex.RUnlock()
	fake.describeAffectedAccountsForOrganizationPagesWithContextMutex.RLock()
	defer fake.describeAffectedAccountsForOrganizationPagesWithContextMutex.RUnlock()
	fake.describeAffectedAccountsForOrganizationRequestMutex.RLock()
	defer fake.describeAffectedAccountsForOrganizationRequestMutex.RUnlock()
	fake.describeAffectedAccountsForOrganizationWithContextMutex.RLock()
	defer fake.describeAffectedAccountsForOrganizationWithContextMutex.RUnlock()
	fake.describeAffectedEntitiesMutex.RLock()
	defer fake.describeAffectedEntitiesMutex.RUnlock()
	fake.describeAffectedEntitiesForOrganizationMutex.RLock()
	defer fake.describeAffectedEntitiesForOrganizationMutex.RUnlock()
	fake.describeAffectedEntitiesForOrganizationPagesMutex.RLock()
	defer fake.describeAffectedEntitiesForOrganizationPagesMutex.RUnlock()
	fake.describeAffectedEntitiesForOrganizationPagesWithContextMutex.RLock()
	defer fake.describeAffectedEntitiesForOrganizationPagesWithContextMutex.RUnlock()
	fake.describeAffectedEntitiesForOrganizationRequestMutex.RLock()
	defer fake.describeAffectedEntitiesForOrganizationRequestMutex.RUnlock()
	fake.describeAffectedEntitiesForOrganizationWithContextMutex.RLock()
	defer fake.describeAffectedEntitiesForOrganizationWithContextMutex.RUnlock()
	fake.describeAffectedEntitiesPagesMutex.RLock()
	defer fake.describeAffectedEntitiesPagesMutex.RUnlock()
	fake.describeAffectedEntitiesPagesWithContextMutex.RLock()
	defer fake.describeAffectedEntitiesPagesWithContextMutex.RUnlock()
	fake.describeAffectedEntitiesRequestMutex.RLock()
	defer fake.describeAffectedEntitiesRequestMutex.RUnlock()
	fake.describeAffectedEntitiesWithContextMutex.RLock()
	defer fake.describeAffectedEntitiesWithContextMutex.RUnlock()
	fake.describeEntityAggregatesMutex.RLock()
	defer fake.describeEntityAggregatesMutex.RUnlock()
	fake.describeEntityAggregatesRequestMutex.RLock()
	defer fake.describeEntityAggregatesRequestMutex.RUnlock()
	fake.describeEntityAggregatesWithContextMutex.RLock()
	defer fake.describeEntityAggregatesWithContextMutex.RUnlock()
	fake.describeEventAggregatesMutex.RLock()
	defer fake.describeEventAggregatesMutex.RUnlock()
	fake.describeEventAggregatesPagesMutex.RLock()
	defer fake.describeEventAggregatesPagesMutex.RUnlock()
	fake.describeEventAggregatesPagesWithContextMutex.RLock()
	defer fake.describeEventAggregatesPagesWithContextMutex.RUnlock()
	fake.describeEventAggregatesRequestMutex.RLock()
	defer fake.describeEventAggregatesRequestMutex.RUnlock()
	fake.describeEventAggregatesWithContextMutex.RLock()
	defer fake.describeEventAggregatesWithContextMutex.RUnlock()
	fake.describeEventDetailsMutex.RLock()
	defer fake.describeEventDetailsMutex.RUnlock()
	fake.describeEventDetailsForOrganizationMutex.RLock()
	defer fake.describeEventDetailsForOrganizationMutex.RUnlock()
	fake.describeEventDetailsForOrganizationRequestMutex.RLock()
	defer fake.describeEventDetailsForOrganizationRequestMutex.RUnlock()
	fake.describeEventDetailsForOrganizationWithContextMutex.RLock()
	defer fake.describeEventDetailsForOrganizationWithContextMutex.RUnlock()
	fake.describeEventDetailsRequestMutex.RLock()
	defer fake.describeEventDetailsRequestMutex.RUnlock()
	fake.describeEventDetailsWithContextMutex.RLock()
	defer fake.describeEventDetailsWithContextMutex.RUnlock()
	fake.describeEventTypesMutex.RLock()
	defer fake.describeEventTypesMutex.RUnlock()
	fake.describeEventTypesPagesMutex.RLock()
	defer fake.describeEventTypesPagesMutex.RUnlock()
	fake.describeEventTypesPagesWithContextMutex.RLock()
	defer fake.describeEventTypesPagesWithContextMutex.RUnlock()
	fake.describeEventTypesRequestMutex.RLock()
	defer fake.describeEventTypesRequestMutex.RUnlock()
	fake.describeEventTypesWithContextMutex.RLock()
	defer fake.describeEventTypesWithContextMutex.RUnlock()
	fake.describeEventsMutex.RLock()
	defer fake.describeEventsMutex.RUnlock()
	fake.describeEventsForOrganizationMutex.RLock()
	defer fake.describeEventsForOrganizationMutex.RUnlock()
	fake.describeEventsForOrganizationPagesMutex.RLock()
	defer fake.describeEventsForOrganizationPagesMutex.RUnlock()
	fake.describeEventsForOrganizationPagesWithContextMutex.RLock()
	defer fake.describeEventsForOrganizationPagesWithContextMutex.RUnlock()
	fake.describeEventsForOrganizationRequestMutex.RLock()
	defer fake.describeEventsForOrganizationRequestMutex.RUnlock()
	fake.describeEventsForOrganizationWithContextMutex.RLock()
	defer fake.describeEventsForOrganizationWithContextMutex.RUnlock()
	fake.describeEventsPagesMutex.RLock()
	defer fake.describeEventsPagesMutex.RUnlock()
	fake.describeEventsPagesWithContextMutex.RLock()
	defer fake.describeEventsPagesWithContextMutex.RUnlock()
	fake.describeEventsRequestMutex.RLock()
	defer fake.describeEventsRequestMutex.RUnlock()
	fake.describeEventsWithContextMutex.RLock()
	defer fake.describeEventsWithContextMutex.RUnlock()
	fake.describeHealthServiceStatusForOrganizationMutex.RLock()
	defer fake.describeHealthServiceStatusForOrganizationMutex.RUnlock()
	fake.describeHealthServiceStatusForOrganizationRequestMutex.RLock()
	defer fake.describeHealthServiceStatusForOrganizationRequestMutex.RUnlock()
	fake.describeHealthServiceStatusForOrganizationWithContextMutex.RLock()
	defer fake.describeHealthServiceStatusForOrganizationWithContextMutex.RUnlock()
	fake.disableHealthServiceAccessForOrganizationMutex.RLock()
	defer fake.disableHealthServiceAccessForOrganizationMutex.RUnlock()
	fake.disableHealthServiceAccessForOrganizationRequestMutex.RLock()
	defer fake.disableHealthServiceAccessForOrganizationRequestMutex.RUnlock()
	fake.disableHealthServiceAccessForOrganizationWithContextMutex.RLock()
	defer fake.disableHealthServiceAccessForOrganizationWithContextMutex.RUnlock()
	fake.enableHealthServiceAccessForOrganizationMutex.RLock()
	defer fake.enableHealthServiceAccessForOrganizationMutex.RUnlock()
	fake.enableHealthServiceAccessForOrganizationRequestMutex.RLock()
	defer fake.enableHealthServiceAccessForOrganizationRequestMutex.RUnlock()
	fake.enableHealthServiceAccessForOrganizationWithContextMutex.RLock()
	defer fake.enableHealthServiceAccessForOrganizationWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHealthAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ healthiface.HealthAPI = new(FakeHealthAPI)
